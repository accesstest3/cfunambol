/*
 * Funambol is a mobile platform developed by Funambol, Inc.
 * Copyright (C) 2007 Funambol, Inc.
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License version 3 as published by
 * the Free Software Foundation with the addition of the following permission
 * added to Section 15 as permitted in Section 7(a): FOR ANY PART OF THE COVERED
 * WORK IN WHICH THE COPYRIGHT IS OWNED BY FUNAMBOL, FUNAMBOL DISCLAIMS THE
 * WARRANTY OF NON INFRINGEMENT  OF THIRD PARTY RIGHTS.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, see http://www.gnu.org/licenses or write to
 * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301 USA.
 *
 * You can contact Funambol, Inc. headquarters at 643 Bair Island Road, Suite
 * 305, Redwood City, CA 94063, USA, or at email address info@funambol.com.
 *
 * The interactive user interfaces in modified source and object code versions
 * of this program must display Appropriate Legal Notices, as required under
 * Section 5 of the GNU Affero General Public License version 3.
 *
 * In accordance with Section 7(b) of the GNU Affero General Public License
 * version 3, these Appropriate Legal Notices must retain the display of the
 * "Powered by Funambol" logo. If the display of the logo is not reasonably
 * feasible for technical reasons, the Appropriate Legal Notices must display
 * the words "Powered by Funambol".
 */

import java.util.List;
import java.util.Map;

import com.funambol.framework.core.*;
import com.funambol.framework.core.Sync4jException;
import com.funambol.framework.engine.pipeline.OutputMessageProcessor;
import com.funambol.framework.engine.pipeline.MessageProcessingContext;
import com.funambol.framework.engine.pipeline.StopProcessingException;
import com.funambol.framework.logging.FunambolLogger;
import com.funambol.framework.logging.FunambolLoggerFactory;

import com.funambol.foundation.synclet.PIMItemsHandler;

/**
 * Contacts:
 * ==========
 * Removes TEL:PAGER (empty or with value) token because the SonyEricsson W800i
 * is not able to handle this token and so it interrupt the synchronization with
 * an error.
 *
 * Calendars:
 * ==========
 * . Event
 *   Sets the empty tokens with dummy value because SonyEricsson W800i and
 *   SonyEricsson W850i are not able to handle those tokens: in fact, 
 *   it doesn't delete the value of the field that corresponds to the empty 
 *   token (and so the field remains set).
 *
 * . Todo
 *   Sets the empty tokens with dummy value.
 *   Deletes CATEGORIES property. 
 *
 * @version $Id: SonyEricssonW8Xout.bsh,v 1.4 2008-06-30 09:59:07 luigiafassina Exp $
 */
// ------------------------------------------------------------------- Constants
private final String USER_AGENT_W800I = "SonyEricssonW800";
private final String USER_AGENT_W850I = "SonyEricssonW850";

// ---------------------------------------------------------------- Private data
private final FunambolLogger log =
    FunambolLoggerFactory.getLogger("engine.pipeline");

// ------------------------------------------------------ Synclet implementation
importCommands("/com/funambol/server/engine/pipeline/phones-support/bsh/commands");

/**
 * Process and manipulate the output message.
 *
 * @param processingContext the message processing context
 * @param message the message to be processed

 * @throws Sync4jException
 */
void postProcessMessage(MessageProcessingContext processingContext,
                        SyncML message                            )
throws Sync4jException {

    if (log.isTraceEnabled()) {
        log.trace("SonyEricssonW8Xout.postProcessMessage(...)");
    }

    // This map contains the three lists of items separated based on their type
    PIMItemsHandler pimItemsHandler = new PIMItemsHandler();
    Map mapItems = pimItemsHandler.extractOutgoingPIMItems(message);
    
    //
    // Find the user-agent from http request header
    //
    String userAgent = getUserAgent(processingContext);
    
    processPIMItems(mapItems, userAgent);

    throw new StopProcessingException("SonyEricssonW8Xout Synclet finished");
}

/**
 * Processes outgoing items.
 *
 * @param mapItems the map that contains the three lists of items separated
 *                 based on their type
 * @param userAgent the user-agent from http request header
 */
void processPIMItems(Map mapItems, String userAgent) {
    
    //
    // Cycle on vcard list
    //
    for (i: (List)mapItems.get(PIMItemsHandler.KEY_VCARD)) {
        postProcessVCard(i);
    }
    
    //
    // Cycle on vevent list
    //
    for (i: (List)mapItems.get(PIMItemsHandler.KEY_VEVENT)) {
        postProcessVEvent(i, userAgent);
    }
	
    //
    // Cycle on vtodo list
    //
    for (i: (List)mapItems.get(PIMItemsHandler.KEY_VTODO)) {
        postProcessVTodo(i, userAgent);
    }
	
}

/**
 * Processes outgoing vcard.
 *
 * Removes TEL:PAGER (empty or with value) token because the phone is not able
 * to handle this token and so it interrupt the synchronization with an error.
 * 
 * Removes TEL;FAX;WORK, TEL;WORK;PREF, TEL;PREF;VOICE in order to store on device
 * only the properties of the Personal fields - the device can store only five telephone numbers
 * 
 * Replaces:
 * TEL;VOICE 		with	TEL
 * TEL;FAX;HOME 	with	TEL;FAX
 * TEL;VOICE;HOME	with	TEL;HOME
 * TEL;VOICE;WORK	with 	TEL;WORK
 * in order to have a simmetric behaviour in Input and Output
 *
 * @param i the item to process
 */
void postProcessVCard(Item i) {
    i.data.data = deleteOutProperty(i.data.data, "TEL;PAGER");
	
	i.data.data = deleteOutProperty(i.data.data, "TEL;FAX;WORK");
	i.data.data = deleteOutProperty(i.data.data, "TEL;WORK;PREF");
	i.data.data = deleteOutProperty(i.data.data, "TEL;PREF;VOICE");

	i.data.data = replaceOutProperty(i.data.data, "TEL;VOICE"     , "TEL"     );
	i.data.data = replaceOutProperty(i.data.data, "TEL;FAX;HOME"  , "TEL;FAX" );
	i.data.data = replaceOutProperty(i.data.data, "TEL;VOICE;HOME", "TEL;HOME");
	i.data.data = replaceOutProperty(i.data.data, "TEL;VOICE;WORK", "TEL;WORK");
}

/**
 * Processes outgoing vevent.
 *
 * Sets the empty tokens with dummy value.
 *
 * @param i the item to process
 * @param userAgent the user-agent from http request header
 */
void postProcessVEvent(Item i, String userAgent) {

    if (userAgent.startsWith(USER_AGENT_W800I) ||
		userAgent.startsWith(USER_AGENT_W850I)) {
        i.data.data = setDummyProperties(i.data.data);
    }
}

/**
 * Processes outgoing vtodo.
 *
 * Sets dummy value for summary.
 * Deletes CATEGORIES property that can cause the device restart  
 *
 * @param i the item to be processed
 */
void postProcessVTodo(Item i, String userAgent) {
    data = i.data.data;

    data = setDummyValue(data, "SUMMARY", "SUMMARY");
    data = setDummyValue(data, "DESCRIPTION", "DESCRIPTION");
	  
    if (userAgent.startsWith(USER_AGENT_W800I)) {
        data = deleteOutProperty(data, "CATEGORIES:");
    }

    i.data.setData(data);    
}

/**
 * Sets the tokens with dummy value.
 * For example:
 *  the LOCATION:\r\n will be replaced with LOCATION:-\r\n
 *
 * @param data the data to process
 *
 * @return the modified data
 */
String setDummyProperties(String data) {
    HashMap mapTokens = new HashMap();
    mapTokens.put("DESCRIPTION", "DESCRIPTION");
    mapTokens.put("LOCATION"   , "LOCATION"   );
    mapTokens.put("SUMMARY"    , "SUMMARY"    );

    data = setDummyValues(data, mapTokens);
    return data;
}

/**
 * Called initializing the synclet
 */
void init() {
    // do nothing
}
