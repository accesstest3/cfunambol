/*
 * Funambol is a mobile platform developed by Funambol, Inc.
 * Copyright (C) 2007 Funambol, Inc.
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License version 3 as published by
 * the Free Software Foundation with the addition of the following permission
 * added to Section 15 as permitted in Section 7(a): FOR ANY PART OF THE COVERED
 * WORK IN WHICH THE COPYRIGHT IS OWNED BY FUNAMBOL, FUNAMBOL DISCLAIMS THE
 * WARRANTY OF NON INFRINGEMENT  OF THIRD PARTY RIGHTS.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, see http://www.gnu.org/licenses or write to
 * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301 USA.
 *
 * You can contact Funambol, Inc. headquarters at 643 Bair Island Road, Suite
 * 305, Redwood City, CA 94063, USA, or at email address info@funambol.com.
 *
 * The interactive user interfaces in modified source and object code versions
 * of this program must display Appropriate Legal Notices, as required under
 * Section 5 of the GNU Affero General Public License version 3.
 *
 * In accordance with Section 7(b) of the GNU Affero General Public License
 * version 3, these Appropriate Legal Notices must retain the display of the
 * "Powered by Funambol" logo. If the display of the logo is not reasonably
 * feasible for technical reasons, the Appropriate Legal Notices must display
 * the words "Powered by Funambol".
 */

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.funambol.framework.core.*;
import com.funambol.framework.core.Sync4jException;
import com.funambol.framework.engine.pipeline.InputMessageProcessor;
import com.funambol.framework.engine.pipeline.MessageProcessingContext;
import com.funambol.framework.logging.FunambolLogger;
import com.funambol.framework.logging.FunambolLoggerFactory;

import com.funambol.foundation.synclet.PIMItemsHandler;

/**
 * Contacts:
 * =========
 * Processes the incoming vcard items and adds the missing tokens.
 * Handles large objects.
 * Replaces field TEL: with TEL;VOICE: token.
 * Replaces field TEL;FAX: with TEL;FAX;HOME: token.
 * Removes the command size.
 *
 * Calendars:
 * ==========
 * . Event
 *   Processes the incoming vevent items and adds the missing tokens.
 *   Handles large objects.
 *   Removes the command size.
 *
 * . Todo
 *   Processes the incoming vtodo items and adds the missing tokens.
 *   Handles large objects.
 *   Removes the dummy values.
 *
 * @version $Id: SonyEricssonXin.bsh,v 1.11 2008-06-30 10:01:16 luigiafassina Exp $
 */

// ---------------------------------------------------------------- Private data
private final FunambolLogger log =
    FunambolLoggerFactory.getLogger("engine.pipeline");

private Map missingCardTokens  = null;
private Map missingEventTokens = null;
private Map missingTodoTokens  = null;

// ------------------------------------------------------ Synclet implementation
importCommands("/com/funambol/server/engine/pipeline/phones-support/bsh/commands");

/**
 * Process input message and set MessageProcessingContext property.
 *
 * @param processingContext the message processing context
 * @param message the message to be processed
 *
 * @throws Sync4jException
 */
void preProcessMessage(MessageProcessingContext processingContext,
                       SyncML message                            )
throws Sync4jException {

    if (log.isTraceEnabled()) {
        log.trace("SonyEricssonXin.preProcessMessage(...)");
    }

    removeCommandSize(message);

    // This map contains the three lists of items separated based on their type
    PIMItemsHandler pimItemsHandler = new PIMItemsHandler();
    Map mapItems =
        pimItemsHandler.extractIncomingPIMItems(processingContext, message);
    processPIMItems(mapItems, pimItemsHandler);
}

/**
 * Processes incoming items.
 *
 * @param mapItems the map that contains the three lists of items separated
 *                 based on their type
 * @param pimItemsHandler the object to handle the large object
 *
 */
void processPIMItems(Map mapItems, PIMItemsHandler pimItemsHandler) {

    //
    // Cycle on vcard list
    //
    for (i: (List)mapItems.get(PIMItemsHandler.KEY_VCARD)) {
        preProcessContact(i);
        pimItemsHandler.fixLargeObjectSize(i);
    }

    //
    // Cycle on vevent list
    //
    for (i: (List)mapItems.get(PIMItemsHandler.KEY_VEVENT)) {
        preProcessEvent(i);
        pimItemsHandler.fixLargeObjectSize(i);
    }
    
    //
    // Cycle on vtodo list
    //
    for (i: (List)mapItems.get(PIMItemsHandler.KEY_VTODO)) {
        preProcessTodo(i);
        pimItemsHandler.fixLargeObjectSize(i);
    }    
}

/**
 * Replaces field TEL: with TEL;VOICE: token.
 * Replaces field TEL;FAX with TEL;FAX;HOME token.
 * Adds missing fields.
 *
 * @param i the item content
 */
void preProcessContact(Item i) {
    data = i.data.data;

    data = checkTel(data);
    data = checkFax(data);
    
    //
    // Adds void tokens if they are missing in VCARD item
    //
    i.data.data = addVoidTokens(data, "END:VCARD", missingCardTokens);
}

/**
 * Initializes hashmap of contact and event properties.
 */
void init() {
    missingCardTokens  = new HashMap();
    missingEventTokens = new HashMap();
    missingTodoTokens  = new HashMap();

    missingCardTokens.put("\r\nN"                   , "N:;;;;"         );
    missingCardTokens.put("\r\nTEL;VOICE:"          , "TEL;VOICE:"     );
    missingCardTokens.put("\r\nTEL;HOME:"           , "TEL;HOME:"      );
    missingCardTokens.put("\r\nTEL;WORK:"           , "TEL;WORK:"      );
    missingCardTokens.put("\r\nEMAIL;INTERNET;PREF" , "EMAIL;INTERNET:");
    missingCardTokens.put("\r\nTEL;CELL:"           , "TEL;CELL:"      );
    missingCardTokens.put("\r\nTEL;FAX;HOME:"       , "TEL;FAX;HOME:"  );
    missingCardTokens.put("\r\nNOTE"                , "NOTE:"          );
    missingCardTokens.put("\r\nADR;HOME"            , "ADR;HOME:;;;;;;");
    missingCardTokens.put("\r\nADR;WORK"            , "ADR;WORK:;;;;;;");
    missingCardTokens.put("\r\nURL"                 , "URL:"           );
    missingCardTokens.put("\r\nBDAY:"               , "BDAY:"          );
    missingCardTokens.put("\r\nORG"                 , "ORG:"           );
    missingCardTokens.put("\r\nTITLE"               , "TITLE:"         );

    missingEventTokens.put("\r\nDTSTART"     , "DTSTART:"    );
    missingEventTokens.put("\r\nDTEND"       , "DTEND:"      );
    missingEventTokens.put("\r\nSUMMARY"     , "SUMMARY:"    );
    missingEventTokens.put("\r\nLOCATION"    , "LOCATION:"   );
    missingEventTokens.put("\r\nDESCRIPTION" , "DESCRIPTION:");
    missingEventTokens.put("\r\nCLASS"       , "CLASS:"      );
    missingEventTokens.put("\r\nAALARM"      , "AALARM:"     );
    
    missingTodoTokens.put("\r\nSUMMARY"    , "SUMMARY:"    );
    missingTodoTokens.put("\r\nDESCRIPTION", "DESCRIPTION:");
    missingTodoTokens.put("\r\nDTSTART:"   , "DTSTART:"    );
    missingTodoTokens.put("\r\nDTEND:"     , "DTEND:"      );
    missingTodoTokens.put("\r\nCATEGORIES" , "CATEGORIES:" );
    missingTodoTokens.put("\r\nPRIORITY"   , "PRIORITY:"   );
    missingTodoTokens.put("\r\nSTATUS"     , "STATUS:"     );
    missingTodoTokens.put("\r\nCLASS"      , "CLASS:"      );
    missingTodoTokens.put("\r\nAALARM:"    , "AALARM:"     );
    missingTodoTokens.put("\r\nDALARM:"    , "DALARM:"     );      
}

/**
 * Replaces field TEL: with TEL;VOICE: token.
 *
 * @param data the data to process
 *
 * @return the modified data
 */
String checkTel(String data) {

    int index = data.indexOf("\nTEL:");

    if( index != -1){
        data = replace(data, "\nTEL:", "\nTEL;VOICE:");
    }

    return data;
}

/**
 * Replaces field TEL;FAX with TEL;FAX;HOME token.
 *
 * @param data the data to process
 *
 * @return the modified data
 */
String checkFax(String data) {

    int index = data.indexOf("\nTEL;FAX:");

    if( index != -1){
        data = replace(data, "\nTEL;FAX:", "\nTEL;FAX;HOME:");
    }

    return data;
}

/**
 * Adds missing fields.
 *
 * @param i the item content
 */
void preProcessEvent(Item i) {

    //
    // Adds void tokens if they are missing in VEVENT item
    //
    content = addVoidTokens(i.data.data, "END:VEVENT", missingEventTokens);

    i.data.data = content + "END:VCALENDAR\r\n";
    
}

/**
 * Processes incoming vtodo.
 * 
 * Removes the dummy value.
 *
 * Adds missing fields. 
 *
 * @param i the item to be processed
 */
void preProcessTodo(Item i) {    
    
    data = i.data.data;
    
    //
    // Removes the dummy value.
    //
    data = removeDummyValue(data, "SUMMARY;CHARSET=UTF-8:"    ,
                                  "SUMMARY:"    );
    data = removeDummyValue(data, "DESCRIPTION;CHARSET=UTF-8:",
                                  "DESCRIPTION:");
    //
    // Adds void tokens if they are missing in VTODO item
    //
    data = addVoidTokens(data, "END:VTODO", missingTodoTokens);
    
    i.data.data = data + "END:VCALENDAR\r\n";
}


/**
 * Replaces a pattern string.
 *
 * @param str the string to be modified
 * @param pattern the pattern to be searched
 * @param replace the replace substring
 *
 * @return the modified data
 */
String replace(String str, String pattern, String replace) {
    int s = 0;
    int e = 0;
    StringBuffer result = new StringBuffer();

    while ((e = str.indexOf(pattern, s)) >= 0) {
        result.append(str.substring(s, e));
        result.append(replace);
        s = e + pattern.length();
    }
    result.append(str.substring(s));
    return result.toString();
}
