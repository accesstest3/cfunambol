/*
 * Funambol is a mobile platform developed by Funambol, Inc.
 * Copyright (C) 2008 Funambol, Inc.
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License version 3 as published by
 * the Free Software Foundation with the addition of the following permission
 * added to Section 15 as permitted in Section 7(a): FOR ANY PART OF THE COVERED
 * WORK IN WHICH THE COPYRIGHT IS OWNED BY FUNAMBOL, FUNAMBOL DISCLAIMS THE
 * WARRANTY OF NON INFRINGEMENT  OF THIRD PARTY RIGHTS.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, see http://www.gnu.org/licenses or write to
 * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301 USA.
 *
 * You can contact Funambol, Inc. headquarters at 643 Bair Island Road, Suite
 * 305, Redwood City, CA 94063, USA, or at email address info@funambol.com.
 *
 * The interactive user interfaces in modified source and object code versions
 * of this program must display Appropriate Legal Notices, as required under
 * Section 5 of the GNU Affero General Public License version 3.
 *
 * In accordance with Section 7(b) of the GNU Affero General Public License
 * version 3, these Appropriate Legal Notices must retain the display of the
 * "Powered by Funambol" logo. If the display of the logo is not reasonably
 * feasible for technical reasons, the Appropriate Legal Notices must display
 * the words "Powered by Funambol".
 */

import java.util.List;
import java.util.Map;
import java.util.HashMap;

import com.funambol.framework.core.*;
import com.funambol.framework.core.Sync4jException;
import com.funambol.framework.engine.pipeline.InputMessageProcessor;
import com.funambol.framework.engine.pipeline.MessageProcessingContext;
import com.funambol.framework.engine.pipeline.StopProcessingException;
import com.funambol.framework.logging.FunambolLogger;
import com.funambol.framework.logging.FunambolLoggerFactory;

import com.funambol.foundation.synclet.PIMItemsHandler;

/**
 * Contacts:
 * =========
 * Sets the Type text/x-vcard in the meta for each contact item, if it
 * does not exists. 
 *
 * Calendars:
 * ==========
 * Sets the Type text/x-vcalendar in the meta for each event/todo item, if it
 * does not exists.
 *
 * @version $Id: MotorolaZ8in.bsh,v 1.2 2008-07-04 14:22:00 luigiafassina Exp $
 */
 
// ---------------------------------------------------------------- Private data
private final FunambolLogger log =
    FunambolLoggerFactory.getLogger("engine.pipeline");

/**
 * Process input message and set MessageProcessingContext property.
 *
 * @param processingContext the message processing context
 * @param message the message to be processed
 *
 * @throws Sync4jException
 */
void preProcessMessage(MessageProcessingContext processingContext,
                       SyncML message                            )
throws Sync4jException {

    if (log.isTraceEnabled()) {
        log.trace("MotorolaZ8in.preProcessMessage(...)");
    }
     
    // This map contains the three lists of items separated based on their type
    PIMItemsHandler pimItemsHandler = new PIMItemsHandler();
    Map mapItems =
        pimItemsHandler.extractIncomingPIMItems(processingContext, message);
    processPIMItems(mapItems, pimItemsHandler);

}

/**
 * Processes incoming items.
 *
 * @param mapItems the map that contains the three lists of items separated
 *                 based on their type
 * @param pimItemsHandler the object to handle the large object
 *
 */
void processPIMItems(Map mapItems, PIMItemsHandler pimItemsHandler) {

    //
    // Cycle on vcard list
    //
    for (i: (List)mapItems.get(PIMItemsHandler.KEY_VCARD)) {
        preProcessContact(i);
        pimItemsHandler.fixLargeObjectSize(i);
    }

    //
    // Cycle on vevent list
    //
    for (i: (List)mapItems.get(PIMItemsHandler.KEY_VEVENT)) {
        preProcessEvent(i);
        pimItemsHandler.fixLargeObjectSize(i);
    }
    
    //
    // Cycle on vtodo list
    //
    for (i: (List)mapItems.get(PIMItemsHandler.KEY_VTODO)) {
        preProcessTodo(i);
        pimItemsHandler.fixLargeObjectSize(i);
    }
}

/**
 * Processes incoming contacts.
 *
 * @param i the Item to process
 */
void preProcessContact(Item i) {
    setItemType(i, "text/x-vcard");
}


/**
 * Processes incoming events.
 *
 * @param i the Item to process 
 */
void preProcessEvent(Item i) {
    setItemType(i, "text/x-vcalendar");
}

/**
 * Processes incoming tasks.
 *
 * @param i the Item to process
 */
void preProcessTodo(Item i) {
    setItemType(i, "text/x-vcalendar");
}


/**
 * Called initializing the synclet
 */
void init() {
    //does nothing
}

/**
 * Sets the given Type in the meta of the given item.
 *  
 * @param i item to be managed
 * @param type string representing item type to add
 */
void setItemType(Item i, String type){
    meta = i.getMeta();
    
    if (meta == null){
        meta = new Meta();
        i.setMeta(meta);
    }

    if (meta.getType() == null) {
        meta.setType(type);
    }
}