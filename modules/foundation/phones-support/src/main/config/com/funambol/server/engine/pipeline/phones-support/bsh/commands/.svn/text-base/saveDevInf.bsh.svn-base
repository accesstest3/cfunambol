/*
 * Funambol is a mobile platform developed by Funambol, Inc.
 * Copyright (C) 2007 Funambol, Inc.
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License version 3 as published by
 * the Free Software Foundation with the addition of the following permission
 * added to Section 15 as permitted in Section 7(a): FOR ANY PART OF THE COVERED
 * WORK IN WHICH THE COPYRIGHT IS OWNED BY FUNAMBOL, FUNAMBOL DISCLAIMS THE
 * WARRANTY OF NON INFRINGEMENT  OF THIRD PARTY RIGHTS.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, see http://www.gnu.org/licenses or write to
 * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301 USA.
 *
 * You can contact Funambol, Inc. headquarters at 643 Bair Island Road, Suite
 * 305, Redwood City, CA 94063, USA, or at email address info@funambol.com.
 *
 * The interactive user interfaces in modified source and object code versions
 * of this program must display Appropriate Legal Notices, as required under
 * Section 5 of the GNU Affero General Public License version 3.
 *
 * In accordance with Section 7(b) of the GNU Affero General Public License
 * version 3, these Appropriate Legal Notices must retain the display of the
 * "Powered by Funambol" logo. If the display of the logo is not reasonably
 * feasible for technical reasons, the Appropriate Legal Notices must display
 * the words "Powered by Funambol".
 */

import java.io.File;
import java.io.IOException;

import java.util.ArrayList;
import java.util.List;

import com.funambol.framework.core.*;
import com.funambol.framework.core.Sync4jException;
import com.funambol.framework.engine.pipeline.InputMessageProcessor;
import com.funambol.framework.engine.pipeline.MessageProcessingContext;
import com.funambol.framework.logging.FunambolLogger;
import com.funambol.framework.logging.FunambolLoggerFactory;
import com.funambol.framework.server.Capabilities;
import com.funambol.framework.server.Sync4jDevice;
import com.funambol.framework.server.inventory.*;
import com.funambol.framework.tools.SyncMLUtil;
import com.funambol.framework.tools.IOTools;

import com.funambol.server.config.*;

/**
 * This bsh save the capabilities of the device into a deviceID.xml file
 * (for example IMEI12345678.xml) in capabilities dir under Funambol home.
 *
 * @version $Id: saveDevInf.bsh,v 1.3 2008-03-26 22:22:13 stefano_fornari Exp $
 */

// ------------------------------------------------------------------- Constants
private final FunambolLogger log =
    FunambolLoggerFactory.getLogger("engine.pipeline");

private String capabilitiesPath =
    Configuration.getConfiguration().getSync4jHome() + "/capabilities";

// ------------------------------------------------------ Synclet implementation

/**
 * Process input message and set MessageProcessingContext property.
 *
 * @param processingContext the message processing context
 * @param message the message to be processed
 *
 * @throws Sync4jException
 */
void preProcessMessage(MessageProcessingContext processingContext,
                       SyncML message                            )
throws Sync4jException {

    if (log.isTraceEnabled()) {
        log.trace("saveDevInf.preProcessMessage(...)");
    }

    saveDevInf(message);
}

void saveDevInf(SyncML message) {

    deviceId = message.syncHdr.source.locURI;
    
    if (log.isTraceEnabled()) {
        log.trace("Save DevInf of " + deviceId);
    }
    
    boolean foundCapsCmd = false;
    
    //
    // Checks if the client sends the capabilities into Put or Results command
    //
    List cmds = (ArrayList)message.getSyncBody().getCommands();
    AbstractCommand bodycmd = null;
    DevInfData devInfData = null;
    for (int i=0; cmds != null && i<cmds.size(); i++) {
        bodycmd = (AbstractCommand)cmds.get(i);
        
        if (bodycmd instanceof Put || bodycmd instanceof Results) {
            foundCapsCmd = true;
            List items = (ArrayList)bodycmd.items;
            devInfData = ((DevInfItem)items.get(0)).devInfData;
            break;
        }
    }
    
    if (!foundCapsCmd) {
        return;
    }
    
    File capsPath = null;
    try {
        capsPath = new File(capabilitiesPath);
        
        //
        // Creates the directory capabilities if it doesn't exist
        //
        if (!capsPath.isDirectory()) {
            capsPath.mkdirs();
        }
    } catch(IOException e) {
        log.error("Error during creation of capabilities directory", e);
    }

    File deviceIdFile =
        new File(capsPath + "/" + deviceId.replaceAll(":","") + ".xml");
        
    if (deviceIdFile.exists()) {
        log.trace("The file with the capabilities for " +
                  deviceId +
                  " already exists.");
        return;
    } else {
        //
        // If the file with capabilities doesn't exist and the client sends its
        // capabilities into SyncML message, than stores this DevInf into file.
        //
        if (foundCapsCmd) {
            IOTools.writeFile(SyncMLUtil.toXML(devInfData.devInf), deviceIdFile);
        } else {
            //
            // If the file doesn't exist and the client doesn't send its
            // capabilities, than it is not possible for this command to force
            // the request of this information: to force it the id_caps into
            // database should be set to null, but this is not allowed.
            //
        }
    }
}

/**
 * Called initializing the synclet
 */
void init() {
    // do nothing
}
