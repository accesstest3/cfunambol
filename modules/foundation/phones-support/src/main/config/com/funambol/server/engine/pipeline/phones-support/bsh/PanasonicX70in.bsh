/*
 * Funambol is a mobile platform developed by Funambol, Inc.
 * Copyright (C) 2007 Funambol, Inc.
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License version 3 as published by
 * the Free Software Foundation with the addition of the following permission
 * added to Section 15 as permitted in Section 7(a): FOR ANY PART OF THE COVERED
 * WORK IN WHICH THE COPYRIGHT IS OWNED BY FUNAMBOL, FUNAMBOL DISCLAIMS THE
 * WARRANTY OF NON INFRINGEMENT  OF THIRD PARTY RIGHTS.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, see http://www.gnu.org/licenses or write to
 * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301 USA.
 *
 * You can contact Funambol, Inc. headquarters at 643 Bair Island Road, Suite
 * 305, Redwood City, CA 94063, USA, or at email address info@funambol.com.
 *
 * The interactive user interfaces in modified source and object code versions
 * of this program must display Appropriate Legal Notices, as required under
 * Section 5 of the GNU Affero General Public License version 3.
 *
 * In accordance with Section 7(b) of the GNU Affero General Public License
 * version 3, these Appropriate Legal Notices must retain the display of the
 * "Powered by Funambol" logo. If the display of the logo is not reasonably
 * feasible for technical reasons, the Appropriate Legal Notices must display
 * the words "Powered by Funambol".
 */

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.funambol.framework.core.*;
import com.funambol.framework.core.Sync4jException;
import com.funambol.framework.engine.pipeline.InputMessageProcessor;
import com.funambol.framework.engine.pipeline.MessageProcessingContext;
import com.funambol.framework.engine.pipeline.StopProcessingException;
import com.funambol.framework.logging.FunambolLogger;
import com.funambol.framework.logging.FunambolLoggerFactory;
import com.funambol.framework.server.Sync4jDevice;

import com.funambol.foundation.synclet.PIMItemsHandler;

/**
 * Contacts:
 * =========
 * Processes the incoming vcard items and adds the missing tokens.
 * All email fields are sent by the device as EMAIL;INTERNET:,
 * even if they're stored on device as Home, Work and Other email.
 * Synclet corrects this wrong behaviour and replaces first email
 * with EMAIL;INTERNET;HOME: and second email with
 * EMAIL;INTERNET;WORK:
 * Sets the item size to "null" when it's not a Large Object.
 *
 * Calendars:
 * ==========
 * Event
 * Processes the incoming vevent items and adds the missing tokens.
 * Handles large objects.
 * Sets the item size to "null" when it's not a Large Object.
 *
 * @version $Id: PanasonicX70in.bsh,v 1.4 2008-03-26 22:22:12 stefano_fornari Exp $
 */

// ---------------------------------------------------------------- Private data
private final FunambolLogger log =
    FunambolLoggerFactory.getLogger("engine.pipeline");

// ------------------------------------------------------ Synclet implementation
importCommands("/com/funambol/server/engine/pipeline/phones-support/bsh/commands");

/**
 * Process input message and set MessageProcessingContext property.
 *
 * @param processingContext the message processing context
 * @param message the message to be processed
 *
 * @throws Sync4jException
 */
void preProcessMessage(MessageProcessingContext processingContext,
                       SyncML message                            )
throws Sync4jException {

    if (log.isTraceEnabled()) {
        log.trace("PanasonicX70in.preProcessMessage(...)");
    }
    
    // This map contains the two lists of items separated based on their type
    PIMItemsHandler pimItemsHandler = new PIMItemsHandler();
    Map mapItems =
        pimItemsHandler.extractIncomingPIMItems(processingContext, message);
    
    //
    // Retrieves the device from the db
    //
    Sync4jDevice device = deviceLookup(message.syncHdr.source.locURI);
    
    processPIMItems(mapItems, pimItemsHandler, device);

    throw new StopProcessingException("PanasonicX70in Synclet finished");
}

/**
 * Processes incoming items.
 *
 * @param mapItems the map that contains the three lists of items separated
 *                 based on their type
 * @param pimItemsHandler the object to handle the large object
 * @param device the device information
 *
 */
void processPIMItems(Map             mapItems       ,
                     PIMItemsHandler pimItemsHandler,
                     Sync4jDevice    device         ) {
    //
    // Cycle on vCard list
    //
    for (i: (List)mapItems.get(PIMItemsHandler.KEY_VCARD)) {
        preProcessContact(i);
        pimItemsHandler.fixLargeObjectSize(i);
    }
    
    TimeZone tz;
    if ((device != null) && (device.timeZone != null)) {
        tz = TimeZone.getTimeZone(device.timeZone);
    } else {
        tz = null;
    }
    
    //
    // Cycle on vEvent list
    //
    for (i: (List)mapItems.get(PIMItemsHandler.KEY_VEVENT)) {
        preProcessEvent(i, tz);
        pimItemsHandler.fixLargeObjectSize(i);
    }    
}

/**
 * Processes incoming contacts.
 *
 * Replaces field TEL: with TEL;VOICE: token.
 * Replaces field TEL;FAX: with TEL;FAX;HOME: token.
 * Adds missing fields
 *
 * @param i the item to process
 */
void preProcessContact(Item i) {
    
    removeItemSize(i);
    
    data = i.data.data;
    
    data = replaceFirstInProperty(data, "EMAIL;INTERNET:", "EMAIL;INTERNET;HOME:");
    data = replaceFirstInProperty(data, "EMAIL;INTERNET:", "EMAIL;INTERNET;WORK:");
    
    i.data.data = data;
}

/**
 * Processes incoming events.
 *
 * Fixes Daylight saving time for events
 *
 * @param i the item to process
 */
void preProcessEvent(Item i, TimeZone tz) {
    
    removeItemSize(i);
    
    data = i.data.data;

    if (log.isTraceEnabled()) {
        log.trace("Using device time zone " + tz);
    }
    
    if ((tz != null) && (tz.useDaylightTime())) {
        data = fixSummerTime(data, "DTSTART", false, tz);
        data = fixSummerTime(data, "DTEND"  , false, tz);
    }
    
    i.data.data = data;
}

/**
 * Sets item size to null if the item is a Large Object.
 * The device sends the DECLARED_SIZE of each item equal to
 * the DECLARED_SIZE of the last item.
 *
 * @param i the item to be processed
 */   
void removeItemSize(Item i) {
    meta = i.meta;
    if (meta != null && !i.isMoreData()) {
        i.meta.setSize(null);
    }
}


/**
 * Initializes hashmap of contact and event properties.
 */
void init() {
    //do nothing
}