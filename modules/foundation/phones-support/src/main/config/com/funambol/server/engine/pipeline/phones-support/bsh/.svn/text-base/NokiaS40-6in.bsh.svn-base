/*
 * Funambol is a mobile platform developed by Funambol, Inc.
 * Copyright (C) 2009 Funambol, Inc.
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License version 3 as published by
 * the Free Software Foundation with the addition of the following permission
 * added to Section 15 as permitted in Section 7(a): FOR ANY PART OF THE COVERED
 * WORK IN WHICH THE COPYRIGHT IS OWNED BY FUNAMBOL, FUNAMBOL DISCLAIMS THE
 * WARRANTY OF NON INFRINGEMENT  OF THIRD PARTY RIGHTS.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, see http://www.gnu.org/licenses or write to
 * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301 USA.
 *
 * You can contact Funambol, Inc. headquarters at 643 Bair Island Road, Suite
 * 305, Redwood City, CA 94063, USA, or at email address info@funambol.com.
 *
 * The interactive user interfaces in modified source and object code versions
 * of this program must display Appropriate Legal Notices, as required under
 * Section 5 of the GNU Affero General Public License version 3.
 *
 * In accordance with Section 7(b) of the GNU Affero General Public License
 * version 3, these Appropriate Legal Notices must retain the display of the
 * "Powered by Funambol" logo. If the display of the logo is not reasonably
 * feasible for technical reasons, the Appropriate Legal Notices must display
 * the words "Powered by Funambol".
 */

import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

import com.funambol.framework.core.*;
import com.funambol.framework.core.Sync4jException;
import com.funambol.framework.engine.pipeline.InputMessageProcessor;
import com.funambol.framework.engine.pipeline.MessageProcessingContext;
import com.funambol.framework.engine.pipeline.StopProcessingException;
import com.funambol.framework.logging.FunambolLogger;
import com.funambol.framework.logging.FunambolLoggerFactory;

import com.funambol.foundation.synclet.PIMItemsHandler;

/**
 * Contacts:
 * =========
 * Processes the incoming VCARDs and adds the missing tokens.
 * Handles large objects. 
 * Handles anchors for every source to sync.
 * Replaces ADR token with ADR;HOME prefix.
 * Reduces the phone numbers to one for each of five different number types
 * used by the device (main phone, cell phone, home phone, work phone, fax),
 * removing all TEL properties but the first one for each type.
 *
 * Calendars:
 * ==========
 * . Event
 *   Processes the incoming VEVENTs and adds the missing tokens.
 *   Handles large objects.
 *   Replaces with T235900 (like for all day event) the time of the end date
 *   when it is T000000 and it is equals at the time of the start date.
 *   Modifies VEVENTs of the Memo and Birthday subtypes in order to apply the
 *   all-day format on their DTSTART property.
 *
 * . Todo
 *   Processes the incoming vtodo items and adds the missing tokens.
 *   Handles large objects.
 *   Adjusts the AALARM token so it can be correctly understood by the server.
 *
 * @version $Id$
 */
// ------------------------------------------------------------------- Constants
private Map missingCardTokens      = null;
private Map missingEventTokens     = null;
private Map missingTodoTokens      = null;

// ---------------------------------------------------------------- Private data
private final FunambolLogger log =
    FunambolLoggerFactory.getLogger("engine.pipeline");

// ------------------------------------------------------ Synclet implementation
importCommands("/com/funambol/server/engine/pipeline/phones-support/bsh/commands");

/**
 * Processes input message and set MessageProcessingContext property.
 *
 * @param mpc the message processing context
 * @param message the message to be processed
 *
 * @throws Sync4jException
 */
void preProcessMessage(MessageProcessingContext mpc,
                       SyncML message              )
throws Sync4jException {

    if (log.isTraceEnabled()) {
        log.trace("NokiaS40-6.preProcessMessage(...)");
    }
    
    saveFastSyncLastAnchorMapEntry(message, mpc);
    
    // This map contains the three lists of items separated based on their type
    PIMItemsHandler pimItemsHandler = new PIMItemsHandler();
    Map mapItems = pimItemsHandler.extractIncomingPIMItems(mpc, message);
   
    processPIMItems(mapItems, pimItemsHandler);
    
    throw new StopProcessingException("NokiaS40-6 Synclet finished");
}

/**
 * Processes incoming items.
 *
 * @param mapItems the map that contains the three lists of items separated
 *                 based on their type
 * @param pimItemsHandler the object to handle the large object
 * @param userAgent the user-agent from http request header
 */
void processPIMItems(Map             mapItems       ,
                     PIMItemsHandler pimItemsHandler) {

    //
    // Cycle on vcard list
    //
    for (i: (List)mapItems.get(PIMItemsHandler.KEY_VCARD)) {    
        preProcessVCard(i);
        pimItemsHandler.fixLargeObjectSize(i);
    }
    
    //
    // Cycle on vevent list
    //
    for (i: (List)mapItems.get(PIMItemsHandler.KEY_VEVENT)) {
        preProcessVEvent(i);
        pimItemsHandler.fixLargeObjectSize(i);
    }

    //
    // Cycle on vtodo list
    //
    for (i: (List)mapItems.get(PIMItemsHandler.KEY_VTODO)) {
        preProcessVTodo(i);
        pimItemsHandler.fixLargeObjectSize(i);
    }
}

/**
 * Processes incoming contacts.
 *
 * Replaces TEL;PREF prefix with TEL;
 * Handles fax numbers.
 * Replaces the ADR token with ADR;HOME prefix for Nokia S40 6Ed. token
 * (these phones can handle only one address).
 * Adds missing tokens.
 *  
 * @param i the item to be processed
 * @param userAgent the user-agent from http request header
 *
 */
void preProcessVCard(Item i) {
    
    data = i.data.data;
    data = replaceInProperty(data, "ADR"       , "ADR;HOME");
    data = replaceInProperty(data, "X-NICKNAME", "NICKNAME");
	
    data = keepFirstProperty(data, "TEL(;PREF)?;VOICE"     , "TEL;VOICE"     );
    data = keepFirstProperty(data, "TEL(;PREF)?;CELL;VOICE", "TEL;CELL"      );
    data = keepFirstProperty(data, "TEL(;PREF)?;HOME;VOICE", "TEL;VOICE;HOME");
    data = keepFirstProperty(data, "TEL(;PREF)?;WORK;VOICE", "TEL;VOICE;WORK");
        
    data = replaceFirstInProperty(data, "TEL;FAX;ENCODING=8BIT:", 
                                        "TEL;FAX;HOME:"     );
    data = replaceFirstInProperty(data, "TEL;FAX;ENCODING=8BIT:",
                                        "TEL;FAX;WORK:"     );    
    data = replaceFirstInProperty(data, "EMAIL;CHARSET=UTF-8;ENCODING=8BIT:",
                                        "EMAIL;INTERNET:"     );
    data = replaceFirstInProperty(data, "EMAIL;CHARSET=UTF-8;ENCODING=8BIT:",
                                        "EMAIL;INTERNET;HOME:");
    data = replaceFirstInProperty(data, "EMAIL;CHARSET=UTF-8;ENCODING=8BIT:",
                                        "EMAIL;INTERNET;WORK:");
                                        
    data = removeDummyPhoto(data);
    
    //
    // Adds void standard tokens if they are missing in VCARD item
    //
    data = addVoidTokens(data, "END:VCARD", missingCardTokens);
    
    i.data.data = data;
}

/**
 * Processes incoming calendars.
 *
 * Fixes Memo and Birthday subtypes.
 * Adds missing tokens.
 *  
 * @param i the vevent item to be processed
 */
void preProcessVEvent(Item i) {

    //
    // Checks if the input event is a Memo, Reminder, Birthday, Call or
    // Anniversary.
    //
    if (isNotAMeeting(i)) {
        fixDateTimes(i);
        i.data.data = addProperty(i.data.data, "X-FUNAMBOL-ALLDAY:1");
    }
    
    data = i.data.data;
    
    // Corrects Birthday's recurring rule
    data = replaceInProperty(data, "RRULE:YD1 #0", "RRULE:MD12 #0");
    
    //
    // Adds void tokens if they are missing in VEVENT item
    //
    content = addVoidTokens(data, "END:VEVENT", missingEventTokens);

    i.data.data = content + "END:VCALENDAR\r\n";
}

/**
 * Processes incoming vtodo.
 *
 * Adds missing tokens.
 *  
 * @param i the vtodo item to be processed
 */
void preProcessVTodo(Item i) {    
    //
    // Adds void tokens if they are missing in VTODO item
    //
    content = addVoidTokens(i.data.data, "END:VTODO", missingTodoTokens);

    i.data.data = content + "END:VCALENDAR\r\n";
}

/**
 * Saves pairs (sourceURI, last anchors) in the fast sync map.
 *  
 * Notes about device
 * ==================
 *
 * It may happen that at synchronization "i" device sends anchors with the same
 * values (that is: last anchor == next anchor) and at synchronization "i+1" 
 * it sends anchors that are different (last anchor != next anchor). From the 
 * first time that this behaviour is seen, this will be true for every "i".
 *   
 * Thus: at synchronization "i+1" every modification made on the server between 
 * sync i and i+1 are not sent to the device, while every modification made 
 * between i+1 and i+2 are sent to the device. 
 *  
 * By now it is not clear which are all the conditions that triggers such 
 * behavior and the ones that restore a correct behavior.
 *  
 * Examples:
 *  
 * (1) assume that:
 *      device is working correctly 
 *      only contact are being synchronized
 *      device contains at least one contact
 *
 *  then do the following:
 *  - reset all contact from the server
 *  - sync from device
 *  - modify a contact on server
 *  - sync from the phone; 
 *      equals anchors are sent, modification are sent to the device
 *  - modify a contact on server
 *  - sync from the phone  
 *      different anchors are sent, modification are not sent to the device
 *  - modify a contact on server
 *  - sync from the phone; 
 *      equals anchors are sent, modification are sent to the device
 *  ...and so on....
 *  
 * (2) assume that:
 *      device is working the previuos way   
 *  then do the following:
 *  - delete all contacts on the server
 *  - sync
 *  - add a contact on server
 *  - sync from the phone  
 *      different anchors are sent, item is sent to the device
 *  - modify the contact on server
 *  - sync from the phone  
 *      different anchors are sent, modification are sent to the device
 *  - modify the contact on server
 *  - sync from the phone  
 *      different anchors are sent, modification are sent to the device
 *  ...and so on....
 *    
 * In order to avoid such behavior:
 * at the end of each sync the last_anchor of every syncsource exchanged between
 * device and server is set to -1, so at the subsequent fast sync the items 
 * will be sent to the device, if they have been modified. This has not to be
 * done in case of slow sync.
 * 
 * More precisely:
 * 
 * input:
 *  for every Alert command sent by the device requesting a fast sync, the pair
 *  (sourceURI, last_anchor) is stored in the session context into HashMap
 *  (FAST_SYNC_LAST_ANCHOR_MAP).
 *  
 * output: 
 *  - server could request a slow sync to the device for a source already 
 *    present in the FAST_SYNC_LAST_ANCHOR_MAP map. That entry must be removed.
 *  - when the last message of the sync is sent, the last anchor for every item
 *    exchanged between device and server is set to -1.
 *
 * @param message the SyncML message to be processed
 * @param mpc the message processing context
 */
void saveFastSyncLastAnchorMapEntry(SyncML                   message,
                                    MessageProcessingContext mpc    ){

    //
    // Checks if the msgID is <= 3.
    //
    // All the alerts are sent by the device within the first 3 messages, so it
    // is not necessary to check the subsequent ones. 
    //
    msgID = Integer.parseInt(message.syncHdr.msgID);
    if (msgID > 3) {
        return;
    }

    List cmds = message.syncBody.commands;
    
    Map map = null;
    map = (Map)mpc.getSessionProperty("FAST_SYNC_LAST_ANCHOR_MAP");
    if (map == null) {
        map = new HashMap();
        mpc.setSessionProperty("FAST_SYNC_LAST_ANCHOR_MAP", map);
    }
    
    for (AbstractCommand bodyc : cmds) {
    
        if (bodyc instanceof Alert) {
            
            Alert alert = (Alert)bodyc;
            
            //
            // Checks the type of sync because if a slow sync is required, then
            // the source for this alert has not to be considered.
            //
            syncType = alert.data;
            if (syncType != AlertCode.TWO_WAY) {
                continue;
            } 
            
            List items = alert.items;
            for (Item item : items) {

                //
                // Extracts source uri.
                //
                sourceURI = item.target.locURI;
                
                if (sourceURI.contains("?photo")) {
                    sourceURI = 
                        sourceURI.substring(0, sourceURI.indexOf("?photo"));
                }
                
                //
                // Extracts last anchor
                //
                Meta meta = item.meta;
                if (meta == null) {
                    continue;
                }
                Anchor anchor = meta.anchor;
                
                last = anchor.last;
                
                //                
                // Put entry (sourceURI, last anchor) into the map.
                //                
                map.put(sourceURI, last);
                
                if (log.isTraceEnabled()) {
                    log.trace("Added entry into FAST_SYNC_LAST_ANCHOR_MAP " +
                              "(source: " + sourceURI +
                              ", last_anchor: " + last + ")");
                }
            }
        }
    }
}

/**
 * Checks if the input event is a Memo, Reminder, Birthday, Call or 
 * Anniversary.
 * 
 * @param i the item to check
 * @return false is the event is a meeting, true otherwise   
 */
boolean isNotAMeeting(Item i) {
    
    Pattern p = Pattern.compile(
            "\\nCATEGORIES:(MISCELLANEOUS|REMINDER|SPECIAL OCCASION|PHONE CALL|ANNIVERSARY)(\\r)?\\n");
    Matcher m = p.matcher(i.data.data);
    return m.find();
}

/**
 * Changes the DTSTART time to 00:00:00 local time if it's set to 09:00:00.
 * Changes the DTEND time to 23:59:00 local time if it's set to 09:00:00.
 */
void fixDateTimes(i) {
    
    data = i.data.data;
    
    String dtstart = null, timestart = null;
    String dtend   = null, timeend   = null;
    
    Pattern ps =
        Pattern.compile("(\\r)?\\nDTSTART:([0-9]{8})(T[0-9]{6})?(\\r)?\\n");
    Pattern pe =
        Pattern.compile("(\\r)?\\nDTEND:([0-9]{8})(T[0-9]{6})?(\\r)?\\n");
    
    Matcher ms = ps.matcher(data);
    Matcher me = pe.matcher(data);
    
    if (ms.find()) {
       dtstart   = ms.group(2);
       timestart = ms.group(3);
    }

    if (me.find()) {
        dtend   = me.group(2);
        timeend = me.group(3);
    }

    if (dtstart.equals(dtend) && timestart.equals(timeend)) {
        
        data = replaceData(ms, timestart, "T000000");
        
        Matcher mend = pe.matcher(data);
        if (mend.find()) {
            data = replaceData(mend, timeend, "T235900");
        }

    } else {
        
        //
        // In case of SPECIAL OCCASION (birthday) the device sends
        // DTSTART:20090321T000000
        // DTEND:20090321T090000
        // if the event has not an alarm, but it sends
        // DTSTART:20090323T235900
        // DTEND:20090323T235900
        // if the event has an alarm
        //    
        Pattern psp = 
            Pattern.compile("(\\r)?\\nCATEGORIES:SPECIAL OCCASION(\\r)?\\n");
        Matcher m = psp.matcher(data);
        if (m.find()) {
            if (timestart.equals("T000000") && timeend.equals("T090000")) {
                Matcher mend = pe.matcher(data);
                if (mend.find()) {
                    data = replaceData(mend, timeend, "T235900");
                }
            }
        }
        
        //
        // In case of MISCELLANEOUS (memo) the device sends
        // DTSTART:20090321T090000
        // DTEND:20090321T235900
        // if the event has not an alarm, but it sends
        // DTSTART:20090323T235900
        // DTEND:20090323T235900
        // if the event has an alarm
        // 
        Pattern pmemo = 
            Pattern.compile("(\\r)?\\nCATEGORIES:MISCELLANEOUS(\\r)?\\n");
        Matcher mmemo = pmemo.matcher(data);
        if (mmemo.find()) {
            if (timestart.equals("T090000") && timeend.equals("T235900")) {
                Matcher mstart = ps.matcher(data);
                if (mstart.find()) {
                    data = replaceData(mstart, timestart, "T000000");
                }
            }
        }
    }
    
    i.data.data = data;
}

String replaceData(Matcher match, String oldValue, String newValue) {

    StringBuffer sb = new StringBuffer();
    String midnight = match.group().replaceFirst(oldValue, newValue);
    match.appendReplacement(sb, midnight);
    match.appendTail(sb);
    
    return sb.toString();
}

/**
 * Initializes the hashmaps with the properties for contact.
 */
void init() {
    missingCardTokens  = new HashMap();
    missingEventTokens = new HashMap();
    missingTodoTokens  = new HashMap();
    initPropsVCard ();
    initPropsVEvent();
    initPropsVTodo ();
}

/**
 * Initializes hashmap of contact properties.
 */
void initPropsVCard() {
    missingCardTokens.put("\nN"                  , "N:;"                 );
    missingCardTokens.put("\nTEL;VOICE"          , "TEL;VOICE:"          );
    missingCardTokens.put("\nTEL;CELL"           , "TEL;CELL:"           );
    missingCardTokens.put("\nTEL;VOICE;HOME"     , "TEL;VOICE;HOME:"     );
    missingCardTokens.put("\nTEL;VOICE;WORK"     , "TEL;VOICE;WORK:"     );    
    missingCardTokens.put("\nTEL;FAX;HOME"       , "TEL;FAX;HOME:"       );
    missingCardTokens.put("\nTEL;FAX"            , "TEL;FAX:"            );
    missingCardTokens.put("\nEMAIL;INTERNET"     , "EMAIL;INTERNET:"     );
    missingCardTokens.put("\nEMAIL;INTERNET;HOME", "EMAIL;INTERNET;HOME:");
    missingCardTokens.put("\nEMAIL;INTERNET;WORK", "EMAIL;INTERNET;WORK:");
    missingCardTokens.put("\nTITLE"              , "TITLE:"              );
    missingCardTokens.put("\nORG"                , "ORG:"                );
    missingCardTokens.put("\nNICKNAME"           , "NICKNAME:"           );
    missingCardTokens.put("\nNOTE"               , "NOTE:"               );
    missingCardTokens.put("\nURL"                , "URL:"                );
    missingCardTokens.put("\nBDAY"               , "BDAY:"               );
    missingCardTokens.put("\nADR"                , "ADR;HOME:;;;;;;"     );
    missingCardTokens.put("\nPHOTO"              , "PHOTO:"              );
}

/**
 * Initializes hashmap of vevent properties.
 */
void initPropsVEvent() {
    missingEventTokens.put("\nDTSTART"   , "DTSTART:"   );
    missingEventTokens.put("\nDTEND"     , "DTEND:"     );
    missingEventTokens.put("\nRRULE"     , "RRULE:"     );
    missingEventTokens.put("\nCATEGORIES", "CATEGORIES:");
    missingEventTokens.put("\nSUMMARY"   , "SUMMARY:"   );
    missingEventTokens.put("\nLOCATION"  , "LOCATION:"  );
    missingEventTokens.put("\nAALARM"    , "AALARM:"    );
}

/**
 * Initializes hashmap of vtodo properties.
 */
void initPropsVTodo() {
    missingTodoTokens.put("\r\nDUE"     , "DUE:"     );
    missingTodoTokens.put("\r\nAALARM"  , "AALARM:"  );
    missingTodoTokens.put("\r\nPRIORITY", "PRIORITY:");
    missingTodoTokens.put("\r\nSTATUS"  , "STATUS:"  );
    missingTodoTokens.put("\r\nSUMMARY" , "SUMMARY:" );
}
