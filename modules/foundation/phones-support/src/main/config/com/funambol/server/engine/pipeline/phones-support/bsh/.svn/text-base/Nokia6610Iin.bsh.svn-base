/*
 * Funambol is a mobile platform developed by Funambol, Inc.
 * Copyright (C) 2007 Funambol, Inc.
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License version 3 as published by
 * the Free Software Foundation with the addition of the following permission
 * added to Section 15 as permitted in Section 7(a): FOR ANY PART OF THE COVERED
 * WORK IN WHICH THE COPYRIGHT IS OWNED BY FUNAMBOL, FUNAMBOL DISCLAIMS THE
 * WARRANTY OF NON INFRINGEMENT  OF THIRD PARTY RIGHTS.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, see http://www.gnu.org/licenses or write to
 * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301 USA.
 *
 * You can contact Funambol, Inc. headquarters at 643 Bair Island Road, Suite
 * 305, Redwood City, CA 94063, USA, or at email address info@funambol.com.
 *
 * The interactive user interfaces in modified source and object code versions
 * of this program must display Appropriate Legal Notices, as required under
 * Section 5 of the GNU Affero General Public License version 3.
 *
 * In accordance with Section 7(b) of the GNU Affero General Public License
 * version 3, these Appropriate Legal Notices must retain the display of the
 * "Powered by Funambol" logo. If the display of the logo is not reasonably
 * feasible for technical reasons, the Appropriate Legal Notices must display
 * the words "Powered by Funambol".
 */

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.funambol.framework.core.*;
import com.funambol.framework.core.Sync4jException;
import com.funambol.framework.engine.pipeline.StopProcessingException;
import com.funambol.framework.engine.pipeline.InputMessageProcessor;
import com.funambol.framework.engine.pipeline.MessageProcessingContext;
import com.funambol.framework.logging.FunambolLogger;
import com.funambol.framework.logging.FunambolLoggerFactory;

import com.funambol.foundation.synclet.PIMItemsHandler;

/**
 * Contacts:
 * =========
 * Processes the incoming vcard items and adds the missing tokens.
 * Handles large objects.
 * Replaces TEL;PREF: and TEL;PREF;VOICE: with token TEL;VOICE: so the
 * information is stored like Other Telephone number.
 * Replaces LABEL fields with a proper address token. And if no labels are
 * found, new empty ADR:HOME and ADR:WORK are added
 *
 * Calendars:
 * ==========
 * Handles large objects.
 * Removes the PRODID field.
 *
 * @version $Id: Nokia6610Iin.bsh,v 1.3 2008-03-26 22:22:12 stefano_fornari Exp $
 */
 
// ------------------------------------------------------------------- Constants
private final String PATTERN_LABEL   = "LABEL"          ;
private final String ADDR_HOME       = "ADR;HOME"       ;
private final String ADDR_WORK       = "ADR;WORK"       ;
private final String VCARD_END       = "END:VCARD"      ;
private final String EMPTY_ADDR_HOME = "ADR;HOME:;;;;;;";
private final String EMPTY_ADDR_WORK = "ADR;WORK:;;;;;;";

private Map missingCardTokens = null;

private final FunambolLogger log =
    FunambolLoggerFactory.getLogger("engine.pipeline");

// ------------------------------------------------------ Synclet implementation
importCommands("/com/funambol/server/engine/pipeline/phones-support/bsh/commands");

/**
 * Process input message and set MessageProcessingContext property.
 *
 * @param processingContext the message processing context
 * @param message the message to be processed
 *
 * @throws Sync4jException
 */
void preProcessMessage(MessageProcessingContext processingContext,
                       SyncML message                            )
throws Sync4jException {

    if (log.isTraceEnabled()) {
        log.trace("Nokia6610Iin.preProcessMessage(...)");
    }

    // This map contains the three lists of items separated based on their type
    PIMItemsHandler pimItemsHandler = new PIMItemsHandler();
    Map mapItems =
        pimItemsHandler.extractIncomingPIMItems(processingContext, message);
    processPIMItems(mapItems, pimItemsHandler);
    
    throw new StopProcessingException("Nokia6610Iin Synclet finished");
}

/**
 * Processes incoming items.
 *
 * @param mapItems the map that contains the three lists of items separated
 *                 based on their type
 * @param pimItemsHandler the object to handle the large object
 *
 */
void processPIMItems(Map mapItems, PIMItemsHandler pimItemsHandler) {

    //
    // Cycle on vcard list
    //
    for (i: (List)mapItems.get(PIMItemsHandler.KEY_VCARD)) {
        preProcessContacts(i);
        pimItemsHandler.fixLargeObjectSize(i);
    }

    //
    // Cycle on vevent list
    //
    for (i: (List)mapItems.get(PIMItemsHandler.KEY_VEVENT)) {
        preProcessCalendar(i);
        pimItemsHandler.fixLargeObjectSize(i);
    }

    //
    // Cycle on vtodo list
    //
    for (i: (List)mapItems.get(PIMItemsHandler.KEY_VTODO)) {
        preProcessCalendar(i);
        pimItemsHandler.fixLargeObjectSize(i);
    }
}

/**
 * Processes incoming contacts. We do the follwing:
 *
 * 1) Replace TEL;PREF: and TEL;PREF;VOICE: with token TEL;VOICE:
 *    so the information is stored like Other Telephone number.
 * 2) Replace LABEL fields with a proper address token
 * 3) If no labels are found, new empty ADR:HOME and ADR:WORK are added
 *
 * @param i the item to be processed
 *
 */
void preProcessContacts(Item i) {
    data = i.data.data;
    //
    // Replace TEL;PREF: and TEL;PREF;VOICE: with token TEL;VOICE:
    // so the information is stored like Other Telephone number.
    //
    data = data.replaceAll("TEL;PREF:"      , "TEL;VOICE:");
    data = data.replaceAll("TEL;PREF;VOICE:", "TEL;VOICE:");

    //
    // Replace TEL;PREF;WORK;VOICE: with token TEL;WORK;VOICE:
    //
    data = data.replaceAll("TEL;PREF;WORK;VOICE:", "TEL;WORK;VOICE:");

    //
    // Replace TEL;FAX: with token TEL;FAX;HOME:
    // so the information is stored like Home Fax number.
    //
    data = data.replaceAll("TEL;FAX:", "TEL;FAX;HOME:");

    i.data.setData(data);

    s = e = 0;
    count = 1;
    while ((e = data.indexOf(PATTERN_LABEL, s)) >= 0) {
        s = e + PATTERN_LABEL.length();
        //
        // Search next label or end
        //
        nextLabel = data.indexOf(PATTERN_LABEL, s);
        if (nextLabel >= 0) {
            data = replaceLabel(data, e, nextLabel, count);
        } else {
            endData = data.indexOf(VCARD_END);
            data = replaceLabel(data, e, endData, count);
        }

        i.data.setData(data);
        ++count;
    }

    //
    // If count is still 1, no LABELs were found, therefore we add two
    // ampty addresses
    //
    if (count < 3) {
        endData = data.indexOf(VCARD_END);
        String s1 = data.substring(0, endData);
        String s2 = data.substring(endData);
        i.data.data = s1
                    + ((count == 1) ? (EMPTY_ADDR_HOME + "\r\n") : "")
                    + EMPTY_ADDR_WORK + "\r\n"
                    + s2
                    ;
    }

    //
    // Adds void tokens if they are missing in VCARD item
    //
    i.data.data = addVoidTokens(i.data.data, "END:VCARD", missingCardTokens);
}

/**
 * Processes the incoming item.
 * Removes the PRODID field.
 *
 * @param i the calendar item to be processed
 */
void preProcessCalendar(Item i) {
    data = i.data.data;
    i.data.data = data.replaceAll("PRODID:[^\r\n]+\r\n", "");
}

/**
 * Process and manipulate the item.
 *
 * @param data the item content
 * @param indStart the index of pattern start
 * @param indEnd the index of pattern end
 * @param count the count of pattern
 *
 * @return String the data with replaced pattern
 */
String replaceLabel(String data, int indStart, int indEnd, int count) {
    StringBuffer start = new StringBuffer(data.substring(0,indStart));
    int patternLength = PATTERN_LABEL.length();
    int colon = data.indexOf(":",indStart + patternLength);
    String params = data.substring(indStart + patternLength, colon) + ":";
    String labelValue =
        data.substring(indStart + patternLength + params.length() ,indEnd);
    labelValue = labelValue.replaceAll("\r\n",";");
    labelValue = labelValue.replaceAll("\n",";");
    labelValue = labelValue.substring(0,labelValue.length() -1);

    switch (count) {
        //
        // This phone does not send the post office box and the extended address
        // so we add ;; (as default) before labelValue
        //
        case 1:
            //
            // If the pattern is found for the first time, then it is the
            // home address
            //
            start.append(ADDR_HOME)
                 .append(params)
                 .append(";;")
                 .append(labelValue)
                 .append(";;;;\r\n");
            break;
        case 2:
            //
            // If the pattern is found for the second time, then it is the
            // business address
            //
            start.append(ADDR_WORK)
                 .append(params)
                 .append(";;")
                 .append(labelValue)
                 .append(";;;;\r\n");
            break;
        case 3:
            //
            // If the pattern is found for the third time, then it is the
            // other address
            //
            start.append("ADR")
                 .append(params)
                 .append(";;")
                 .append(labelValue)
                 .append(";;;;\r\n");
            break;
        default:
            //
            //Ignore pattern
            //
    }
    return start.append(data.substring(indEnd,data.length())).toString();
}

/**
 * Initializes hashmap of contact properties.
 */
void init() {
    missingCardTokens = new HashMap();
    
    missingCardTokens.put("\nTEL;VOICE:"          , "TEL;VOICE:"          );
    missingCardTokens.put("\nTEL;PREF;HOME;VOICE:", "TEL;PREF;HOME;VOICE:");
    missingCardTokens.put("\nTEL;CELL;VOICE:"     , "TEL;CELL;VOICE:"     );
    missingCardTokens.put("\nTEL;WORK;VOICE:"     , "TEL;WORK;VOICE:"     );
    missingCardTokens.put("\nTEL;FAX;HOME:"       , "TEL;FAX;HOME:"       );
}
