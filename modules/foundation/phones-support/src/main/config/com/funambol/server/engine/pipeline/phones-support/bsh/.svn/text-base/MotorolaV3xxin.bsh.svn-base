/*
 * Funambol is a mobile platform developed by Funambol, Inc.
 * Copyright (C) 2007 Funambol, Inc.
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License version 3 as published by
 * the Free Software Foundation with the addition of the following permission
 * added to Section 15 as permitted in Section 7(a): FOR ANY PART OF THE COVERED
 * WORK IN WHICH THE COPYRIGHT IS OWNED BY FUNAMBOL, FUNAMBOL DISCLAIMS THE
 * WARRANTY OF NON INFRINGEMENT  OF THIRD PARTY RIGHTS.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, see http://www.gnu.org/licenses or write to
 * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301 USA.
 *
 * You can contact Funambol, Inc. headquarters at 643 Bair Island Road, Suite
 * 305, Redwood City, CA 94063, USA, or at email address info@funambol.com.
 *
 * The interactive user interfaces in modified source and object code versions
 * of this program must display Appropriate Legal Notices, as required under
 * Section 5 of the GNU Affero General Public License version 3.
 *
 * In accordance with Section 7(b) of the GNU Affero General Public License
 * version 3, these Appropriate Legal Notices must retain the display of the
 * "Powered by Funambol" logo. If the display of the logo is not reasonably
 * feasible for technical reasons, the Appropriate Legal Notices must display
 * the words "Powered by Funambol".
 */

import java.util.List;
import java.util.Map;
import java.util.HashMap;

import com.funambol.framework.core.*;
import com.funambol.framework.core.Sync4jException;
import com.funambol.framework.engine.pipeline.InputMessageProcessor;
import com.funambol.framework.engine.pipeline.MessageProcessingContext;
import com.funambol.framework.engine.pipeline.StopProcessingException;
import com.funambol.framework.logging.FunambolLogger;
import com.funambol.framework.logging.FunambolLoggerFactory;

import com.funambol.foundation.synclet.PIMItemsHandler;

/**
 * Sets the maxMsgSize to 6000 bytes due to replace properties overhead.
 *
 * Contacts:
 * =========
 * Processes the incoming VCARD items and adds the missing properties.
 * Handles large objects.
 * Remaps a few properties.
 *
 * Calendars:
 * ==========
 * . Event
 *   Processes the incoming items and adds the missing properties. 
 *   Handles large objects.
 *   Adds property AALARM with empty value if it's missing.
 *   Fixes the CHARSET information.
 *
 * . Task
 *   Handles large objects. 
 *   Fixes the CHARSET information.
 *
 * @version $Id: MotorolaV3xxin.bsh,v 1.6 2008-06-30 09:05:37 luigiafassina Exp $
 */
 
// ---------------------------------------------------------------- Private data
private final FunambolLogger log =
    FunambolLoggerFactory.getLogger("engine.pipeline");

private Map missingCardTokens;
private Map missingEventTokens;

// ------------------------------------------------------ Synclet implementation
importCommands("/com/funambol/server/engine/pipeline/phones-support/bsh/commands");

/**
 * Process input message and set MessageProcessingContext property.
 *
 * @param processingContext the message processing context
 * @param message the message to be processed
 *
 * @throws Sync4jException
 */
void preProcessMessage(MessageProcessingContext processingContext,
                       SyncML message                            )
throws Sync4jException {

    if (log.isTraceEnabled()) {
        log.trace("MotorolaV3xxin.preProcessMessage(...)");
    }
    
    setMaxMsgSize(message, 6000);
    
    // This map contains the three lists of items separated based on their type
    PIMItemsHandler pimItemsHandler = new PIMItemsHandler();
    Map mapItems =
        pimItemsHandler.extractIncomingPIMItems(processingContext, message);
    processPIMItems(mapItems, pimItemsHandler);

    throw new StopProcessingException("MotorolaV3xxin Synclet finished");
}

/**
 * Processes incoming items.
 *
 * @param mapItems the map that contains the three lists of items separated
 *                 based on their type
 * @param pimItemsHandler the object to handle the large object
 *
 */
void processPIMItems(Map mapItems, PIMItemsHandler pimItemsHandler) {

    //
    // Cycle on vcard list
    //
    for (i: (List)mapItems.get(PIMItemsHandler.KEY_VCARD)) {
        preProcessContact(i);
        pimItemsHandler.fixLargeObjectSize(i);
    }

    //
    // Cycle on vevent list
    //
    for (i: (List)mapItems.get(PIMItemsHandler.KEY_VEVENT)) {
        preProcessEvent(i);
        pimItemsHandler.fixLargeObjectSize(i);
    }
	
	//
    // Cycle on vtodo list
    //
    for (i: (List)mapItems.get(PIMItemsHandler.KEY_VTODO)) {
        preProcessTask(i);
        pimItemsHandler.fixLargeObjectSize(i);
    }
}

/**
 * Processes incoming contacts.
 * Replaces property TEL;WORK with TEL;WORK;PREF only if it's in the 5th slot
 * (it's put there when synching with the server).
 * Replaces SOUND property with FN.
 * Replaces X-MOT-CAT custom Motorola property with CATEGORIES.
 * Adds needed void properties if the item lacks them.
 *
 * @param i the Item to process
 */
void preProcessContact(Item i) {
    data = i.data.data;

    data = replaceInProperty(data, 
                             "TEL(;VOICE)?;WORK;X-MOT-RINGID=[0-9]*;X-MOT-POSITION=5:",
                             "TEL;WORK;PREF;X-MOT-POSITION=5:");
    data = replaceInProperty(data, 
                             "TEL;CELL;HOME;X-MOT-RINGID=[0-9]*;X-MOT-POSITION=[0-9]:",
                             "TEL;CELL:");
    data = replaceInProperty(data, 
                             "TEL;CELL;WORK;X-MOT-RINGID=[0-9]*;X-MOT-POSITION=[0-9]:",
                             "TEL;CELL:");
    data = replaceInProperty(data, 
                             "TEL;CELL;X-MOT-RINGID=[0-9]*;X-MOT-POSITION=[0-9]:",
                             "TEL;CELL:");                             
    data = replaceInProperty(data, "SOUND", "NICKNAME");
    data = replaceInProperty(data, "X-MOT-CAT", "CATEGORIES");
    
    data = switchAdrValues(data, false);
    
    //
    // Adds void tokens if they are missing in VCARD item
    //
    data = addVoidTokens(data, "END:VCARD", missingCardTokens);
    
    i.data.data = data;
}


/**
 * Processes incoming events.
 *
 * Check if there is the field AALARM: if not it will be added with empty value.
 * Fixes the CHARSET information.
 *
 * @param i the Item to process
 * 
 */
void preProcessEvent(Item i) {

    data = i.data.data;
    
    data = data.replaceAll("CHARSET= UTF-8:", "CHARSET=UTF-8:");
    //
    // Adds void tokens if they are missing in VEVENT item
    //
    data = addVoidTokens(data, "END:VEVENT", missingEventTokens);
    
    i.data.data = data + "END:VCALENDAR\r\n";
}

/**
 * Processes incoming tasks.
 *
 * Fixes the CHARSET information.
 *
 * @param i the Item to process
 *
 */
void preProcessTask(Item i) {

    data = i.data.data;
    
    data = data.replaceAll( "CHARSET= UTF-8:" , "CHARSET=UTF-8:");
    
    i.data.data = data;
}

/**
 * Called initializing the synclet
 * Empty FN: display name should not be added because 
 * it creates problems with applications that automatically generate it
 */
void init() {
    missingCardTokens  = new HashMap();
    missingEventTokens  = new HashMap();
    
    missingCardTokens.put("\nTEL;VOICE"     , "TEL;VOICE:"     );
    missingCardTokens.put("\nTEL;VOICE;HOME", "TEL;VOICE;HOME:");
    missingCardTokens.put("\nTEL;CELL"      , "TEL;CELL:"      );
    missingCardTokens.put("\nTEL;VOICE;WORK", "TEL;VOICE;WORK:");
    missingCardTokens.put("\nTEL;WORK;PREF" , "TEL;WORK;PREF:" );
    missingCardTokens.put("\nTEL;FAX;HOME"  , "TEL;FAX;HOME:"  );
    missingCardTokens.put("\nTEL;FAX;WORK"  , "TEL;FAX;WORK:"  );
    missingCardTokens.put("\nADR;HOME"      , "ADR;HOME:"      );
    missingCardTokens.put("\nADR;WORK"      , "ADR;WORK:"      );
    missingCardTokens.put("\nURL"           , "URL:"           );
    missingCardTokens.put("\nCATEGORIES"    , "CATEGORIES:"    );
    
    missingEventTokens.put("\nAALARM"       , "AALARM:;;;"     );
}
