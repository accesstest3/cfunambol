/*
 * Funambol is a mobile platform developed by Funambol, Inc.
 * Copyright (C) 2007 Funambol, Inc.
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License version 3 as published by
 * the Free Software Foundation with the addition of the following permission
 * added to Section 15 as permitted in Section 7(a): FOR ANY PART OF THE COVERED
 * WORK IN WHICH THE COPYRIGHT IS OWNED BY FUNAMBOL, FUNAMBOL DISCLAIMS THE
 * WARRANTY OF NON INFRINGEMENT  OF THIRD PARTY RIGHTS.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, see http://www.gnu.org/licenses or write to
 * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301 USA.
 *
 * You can contact Funambol, Inc. headquarters at 643 Bair Island Road, Suite
 * 305, Redwood City, CA 94063, USA, or at email address info@funambol.com.
 *
 * The interactive user interfaces in modified source and object code versions
 * of this program must display Appropriate Legal Notices, as required under
 * Section 5 of the GNU Affero General Public License version 3.
 *
 * In accordance with Section 7(b) of the GNU Affero General Public License
 * version 3, these Appropriate Legal Notices must retain the display of the
 * "Powered by Funambol" logo. If the display of the logo is not reasonably
 * feasible for technical reasons, the Appropriate Legal Notices must display
 * the words "Powered by Funambol".
 */

import java.util.List;
import java.util.Map;

import com.funambol.framework.core.*;
import com.funambol.framework.core.Sync4jException;
import com.funambol.framework.engine.pipeline.OutputMessageProcessor;
import com.funambol.framework.engine.pipeline.MessageProcessingContext;
import com.funambol.framework.engine.pipeline.StopProcessingException;
import com.funambol.framework.logging.FunambolLogger;
import com.funambol.framework.logging.FunambolLoggerFactory;

import com.funambol.foundation.synclet.PIMItemsHandler;

/**
 * Contacts:
 * ==========
 * Removes TEL;FAX;HOME, TEL;FAX;WORK, TEL;PREF;VOICE, 
 * TEL;WORK;PREF properties that are not handled by the device.
 * Moves EMAIL;INTERNET: property to the end of the vcard.
 *
 * Calendars:
 * ==========
 * . Event
 *   Sets the empty tokens with dummy value.
 *
 * @version $Id: PanasonicX70out.bsh,v 1.4 2008-03-26 22:22:12 stefano_fornari Exp $
 */
// ---------------------------------------------------------------- Private data
private final FunambolLogger log =
    FunambolLoggerFactory.getLogger("engine.pipeline");

// ------------------------------------------------------ Synclet implementation
importCommands("/com/funambol/server/engine/pipeline/phones-support/bsh/commands");

/**
 * Process and manipulate the output message.
 *
 * @param processingContext the message processing context
 * @param message the message to be processed

 * @throws Sync4jException
 */
void postProcessMessage(MessageProcessingContext processingContext,
                        SyncML message                            )
throws Sync4jException {

    if (log.isTraceEnabled()) {
        log.trace("PanasonicX70out.postProcessMessage(...)");
    }

    // This map contains the three lists of items separated based on their type
    PIMItemsHandler pimItemsHandler = new PIMItemsHandler();
    Map mapItems = pimItemsHandler.extractOutgoingPIMItems(message);
    
    processPIMItems(mapItems);

    throw new StopProcessingException("PanasonicX70Iout Synclet finished");
}

/**
 * Processes outgoing items.
 *
 * @param mapItems the map that contains the three lists of items separated
 *                 based on their type
 */
void processPIMItems(Map mapItems) {

    //
    // Cycle on vCard list
    //
    for (i: (List)mapItems.get(PIMItemsHandler.KEY_VCARD)) {
        postProcessVCard(i);
    }
}

/**
 * Processes outgoing vcard.
 *
 * Removes properties not handled by the device.
 * Moves EMAIL;INTERNET: property to the end of the vcard.
 *
 * @param i the item to process
 *
 */
void postProcessVCard(Item i) {
    data = i.data.data;
    
    data = deleteOutProperty(data, "TEL;FAX;HOME:");
    data = deleteOutProperty(data, "TEL;FAX;WORK:");
    data = deleteOutProperty(data, "TEL;PREF;VOICE:");
    data = deleteOutProperty(data, "TEL;WORK;PREF:");
    
    data = movePropertyToTheEnd(data, "EMAIL;INTERNET");
    
    i.data.data = data;
}

/**
 * Called initializing the synclet
 */
void init() {
    // do nothing
}
