/*
 * Funambol is a mobile platform developed by Funambol, Inc.
 * Copyright (C) 2007 Funambol, Inc.
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License version 3 as published by
 * the Free Software Foundation with the addition of the following permission
 * added to Section 15 as permitted in Section 7(a): FOR ANY PART OF THE COVERED
 * WORK IN WHICH THE COPYRIGHT IS OWNED BY FUNAMBOL, FUNAMBOL DISCLAIMS THE
 * WARRANTY OF NON INFRINGEMENT  OF THIRD PARTY RIGHTS.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, see http://www.gnu.org/licenses or write to
 * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301 USA.
 *
 * You can contact Funambol, Inc. headquarters at 643 Bair Island Road, Suite
 * 305, Redwood City, CA 94063, USA, or at email address info@funambol.com.
 *
 * The interactive user interfaces in modified source and object code versions
 * of this program must display Appropriate Legal Notices, as required under
 * Section 5 of the GNU Affero General Public License version 3.
 *
 * In accordance with Section 7(b) of the GNU Affero General Public License
 * version 3, these Appropriate Legal Notices must retain the display of the
 * "Powered by Funambol" logo. If the display of the logo is not reasonably
 * feasible for technical reasons, the Appropriate Legal Notices must display
 * the words "Powered by Funambol".
 */

import java.util.List;
import java.util.Map;

import com.funambol.framework.core.*;
import com.funambol.framework.core.Sync4jException;
import com.funambol.framework.engine.pipeline.InputMessageProcessor;
import com.funambol.framework.engine.pipeline.MessageProcessingContext;
import com.funambol.framework.logging.FunambolLogger;
import com.funambol.framework.logging.FunambolLoggerFactory;
import com.funambol.framework.server.Sync4jDevice;

import com.funambol.foundation.synclet.PIMItemsHandler;

/**
 * Contacts
 * ========
 * Replaces field ADR: with ADR:WORK: token (this because the S56 supports just
 * one address).
 * Replaces field TEL;FAX: with TEL;FAX;WORK: token.
 * Replaces field TEL;WORK: with TEL;WORK;PREF: token.
 *
 * Calendar
 * ========
 * Fixes Daylight saving time for events
 * Replaces the DALARM: field with AALARM: field
 *
 * @version $Id: SiemensM55in.bsh,v 1.4 2008-03-26 22:22:12 stefano_fornari Exp $
 */
 
// ------------------------------------------------------------------- Constants
private final FunambolLogger log =
    FunambolLoggerFactory.getLogger("engine.pipeline");
private Map missingCardTokens  = null;
private Map missingEventTokens = null;

// ------------------------------------------------------ Synclet implementation
importCommands("/com/funambol/server/engine/pipeline/phones-support/bsh/commands");

/**
 * Process input message and set MessageProcessingContext property.
 *
 * @param processingContext the message processing context
 * @param message the message to be processed
 *
 * @throws Sync4jException
 */
void preProcessMessage(MessageProcessingContext processingContext,
                       SyncML message                            )
throws Sync4jException {

    if (log.isTraceEnabled()) {
        log.trace("SiemensM55in.preProcessMessage(...)");
    }

    // This map contains the three lists of items separated based on their type
    PIMItemsHandler pimItemsHandler = new PIMItemsHandler();
    Map mapItems =
        pimItemsHandler.extractIncomingPIMItems(processingContext, message);
        
    //
    // Retrieves the device from the db
    //
    Sync4jDevice device = deviceLookup(message.syncHdr.source.locURI);    
        
    processPIMItems(mapItems, pimItemsHandler, device);
}

/**
 * Processes incoming items.
 *
 * @param mapItems the map that contains the three lists of items separated
 *                 based on their type
 * @param device the Sync4jDevice
 * @param pimItemsHandler the object to handle the large object
 *
 */
void processPIMItems(Map             mapItems       ,
                     PIMItemsHandler pimItemsHandler,
                     Sync4jDevice    device         ) {

    //
    // Cycle on vcard list
    //
    for (i: (List)mapItems.get(PIMItemsHandler.KEY_VCARD)) {
        preProcessContacts(i);
        pimItemsHandler.fixLargeObjectSize(i);
    }
    
    TimeZone tz;
    if ((device != null) && (device.timeZone != null)) {
        tz = TimeZone.getTimeZone(device.timeZone);
    } else {
        tz = null;
    }

    //
    // Cycle on vevent list
    //
    for (i: (List)mapItems.get(PIMItemsHandler.KEY_VEVENT)) {
        preProcessEvents(i, tz);
        pimItemsHandler.fixLargeObjectSize(i);
    }
}

/**
 * Processes incoming events.
 *
 * Fixes Daylight saving time for events
 *
 * @param i the Item to be processed
 * @param tz the device timezone
 *
 */
void preProcessEvents(Item i, TimeZone tz) {
    if (log.isTraceEnabled()) {
        log.trace("SiemensM55.preProcessEvents(...)");
    }
    
    String data = i.data.data;
    
    if (log.isTraceEnabled()) {
        log.trace("Using device time zone " + tz);
    }
    
    if ((tz != null) && (tz.useDaylightTime())) {
        data = fixSummerTime(data, "DTSTART", false, tz);
        data = fixSummerTime(data, "DTEND"  , false, tz);
    }
    // Replacing Input ALARM property
    data = replaceInProperty(data, "DALARM:" , "AALARM:");
    
    //
    // Adds void tokens if they are missing in VEVENT item
    //
    content = addVoidTokens(data, "END:VEVENT", missingEventTokens);

    i.data.data = content + "END:VCALENDAR\r\n";
}

/**
 * Processes incoming contacts.
 * Replaces field ADR: with ADR:WORK: token.
 * Replaces field TEL;FAX: with TEL;FAX;WORK: token.
 *
 * @param i the Item to be processed
 *
 */
void preProcessContacts(Item i) {
    if (log.isTraceEnabled()) {
        log.trace("SiemensM55in.preProcessContacts(...)");
    }
    
    String data = i.data.data;
    
    data = replaceInProperty(data, "ADR:"     , "ADR;WORK:"     );
    data = replaceInProperty(data, "TEL;FAX:" , "TEL;FAX;WORK:" );
    data = replaceInProperty(data, "TEL;WORK:", "TEL;WORK;PREF:");
    
    //
    // Adds void tokens if they are missing in VCARD item
    //
    data = addVoidTokens(data, "END:VCARD", missingCardTokens);   
    
    i.data.data = data;
}

/**
 * Called initializing the synclet
 */
void init() {
    missingCardTokens  = new HashMap();
    missingEventTokens = new HashMap();
    
    missingCardTokens.put("\r\nN"                  , "N:;;;;"              );
    missingCardTokens.put("\r\nADR;WORK"           , "ADR;WORK:;;;;;;"     );
    missingCardTokens.put("\r\nORG"                , "ORG:"                );
    missingCardTokens.put("\r\nTEL;HOME"           , "TEL;HOME:"           );
    missingCardTokens.put("\r\nTEL;WORK;PREF"      , "TEL;WORK;PREF:"      );
    missingCardTokens.put("\r\nTEL;CELL"           , "TEL;CELL:"           );
    missingCardTokens.put("\r\nTEL;FAX;WORK"       , "TEL;FAX;WORK:"       );
    missingCardTokens.put("\r\nTEL;FAX;HOME"       , "TEL;FAX;HOME:"       );
    missingCardTokens.put("\r\nEMAIL;INTERNET"     , "EMAIL;INTERNET:"     );
    missingCardTokens.put("\r\nEMAIL;HOME;INTERNET", "EMAIL;HOME;INTERNET:");
    missingCardTokens.put("\r\nURL"                , "URL:"                );
    missingCardTokens.put("\r\nBDAY"               , "BDAY:"               );
    
    missingEventTokens.put("\r\nSUMMARY" , "SUMMARY:" );
    missingEventTokens.put("\r\nLOCATION", "LOCATION:");
    missingEventTokens.put("\r\nDTSTART" , "DTSTART:" );
    missingEventTokens.put("\r\nDTEND"   , "DTEND:"   );
    missingEventTokens.put("\r\nDALARM"  , "DALARM:"  );
    missingEventTokens.put("\r\nAALARM"  , "AALARM:"  );
    missingEventTokens.put("\r\nRRULE"   , "RRULE:"   );

}
