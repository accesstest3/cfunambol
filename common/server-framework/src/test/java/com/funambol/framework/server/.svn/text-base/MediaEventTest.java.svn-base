/*
 * Funambol is a mobile platform developed by Funambol, Inc.
 * Copyright (C) 2010 Funambol, Inc.
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License version 3 as published by
 * the Free Software Foundation with the addition of the following permission
 * added to Section 15 as permitted in Section 7(a): FOR ANY PART OF THE COVERED
 * WORK IN WHICH THE COPYRIGHT IS OWNED BY FUNAMBOL, FUNAMBOL DISCLAIMS THE
 * WARRANTY OF NON INFRINGEMENT  OF THIRD PARTY RIGHTS.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, see http://www.gnu.org/licenses or write to
 * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301 USA.
 *
 * You can contact Funambol, Inc. headquarters at 643 Bair Island Road, Suite
 * 305, Redwood City, CA 94063, USA, or at email address info@funambol.com.
 *
 * The interactive user interfaces in modified source and object code versions
 * of this program must display Appropriate Legal Notices, as required under
 * Section 5 of the GNU Affero General Public License version 3.
 *
 * In accordance with Section 7(b) of the GNU Affero General Public License
 * version 3, these Appropriate Legal Notices must retain the display of the
 * "Powered by Funambol" logo. If the display of the logo is not reasonably
 * feasible for technical reasons, the Appropriate Legal Notices must display
 * the words "Powered by Funambol".
 */
package com.funambol.framework.server;

import junit.framework.TestCase;

/**
 * Test cases for MediaEvent class.
 * 
 * @version $Id$
 */
public class MediaEventTest extends TestCase {

    // --------------------------------------------------------------- Constants
    private static final String START_MEDIA_UPLOAD = "START_MEDIA_UPLOAD";
    private static final String END_MEDIA_UPLOAD   = "END_MEDIA_UPLOAD"  ;
    private static final String USERNAME  = "guest";
    private static final String DEVICEID  = "IMEI:1234567890";
    private static final String SOURCE_PICTURE = "picture";
    private static final String ORIGINATOR = "MY-SERVICE";

    // ------------------------------------------------------------ Constructors
    public MediaEventTest(String testName) {
        super(testName);
    }

    // ------------------------------------------------------- Protected methods
    @Override
    protected void setUp() throws Exception {
        super.setUp();
    }

    @Override
    protected void tearDown() throws Exception {
        super.tearDown();
    }

    // -------------------------------------------------------------- Test cases
    /**
     * Test of createStartMediaUploadEvent method, of class MediaEvent.
     */
    public void testCreateStartMediaUploadEvent() {

        String message = "Start media content upload.";

        Event expResult =
            new MediaEvent(START_MEDIA_UPLOAD, USERNAME, DEVICEID, null, 
                           SOURCE_PICTURE, message, ORIGINATOR, false);
        Event result =
            MediaEvent.createStartMediaUploadEvent(
                USERNAME, DEVICEID, null, SOURCE_PICTURE, message, ORIGINATOR);

        compareEvent(expResult, result);
    }

    /**
     * Test of createStartMediaUploadEventOnError method, of class MediaEvent.
     */
    public void testCreateStartMediaUploadEventOnError() {
        String message = "Error uploading media content for user " + USERNAME;

        Event expResult =
            new MediaEvent(START_MEDIA_UPLOAD, USERNAME, DEVICEID, null,
                           SOURCE_PICTURE, message, ORIGINATOR, true);
        Event result =
            MediaEvent.createStartMediaUploadEventOnError(
                USERNAME, DEVICEID, null, SOURCE_PICTURE, message, ORIGINATOR);

        compareEvent(expResult, result);
    }

    /**
     * Test of createEndMediaUploadEvent method, of class MediaEvent.
     */
    public void testCreateEndMediaUploadEvent_5args() {
        String message = "End media content upload.";

        Event expResult =
            new MediaEvent(END_MEDIA_UPLOAD, USERNAME, DEVICEID, null,
                           SOURCE_PICTURE, message, 0, ORIGINATOR, false);
        Event result =
            MediaEvent.createEndMediaUploadEvent(
                USERNAME, DEVICEID, null, SOURCE_PICTURE, message,0,ORIGINATOR);

        compareEvent(expResult, result);
    }

    /**
     * Test of createEndMediaUploadEvent method, of class MediaEvent.
     */
    public void testCreateEndMediaUploadEvent_4args() {
        String message = "End media content upload";

        Event expResult =
            new MediaEvent(END_MEDIA_UPLOAD, USERNAME, DEVICEID, null, 
                           SOURCE_PICTURE, message, ORIGINATOR, false);
        Event result =
            MediaEvent.createEndMediaUploadEvent(
            USERNAME, DEVICEID, null, SOURCE_PICTURE, message, ORIGINATOR);

        compareEvent(expResult, result);
    }

    /**
     * Test of createEndMediaUploadEventOnError method, of class MediaEvent.
     */
    public void testCreateEndMediaUploadEventOnError_5args() {
        String message = "Error uploading media content for user " + USERNAME
                       + ": invalid luid";

        Event expResult =
            new MediaEvent(END_MEDIA_UPLOAD, USERNAME, DEVICEID, null, 
                           SOURCE_PICTURE, message, 100, ORIGINATOR, true);
        Event result =
            MediaEvent.createEndMediaUploadEventOnError(
            USERNAME, DEVICEID, null, SOURCE_PICTURE, message, 100, ORIGINATOR);

        compareEvent(expResult, result);
    }

    /**
     * Test of createEndMediaUploadEventOnError method, of class MediaEvent.
     */
    public void testCreateEndMediaUploadEventOnError_4args() {
        String message = "Error uploading media content for user " + USERNAME
                       + ": declared size does not match the metadata one";

        Event expResult =
            new MediaEvent(END_MEDIA_UPLOAD, USERNAME, DEVICEID, null,
                           SOURCE_PICTURE, message, ORIGINATOR, true);
        Event result =
            MediaEvent.createEndMediaUploadEventOnError(
            USERNAME, DEVICEID, null, SOURCE_PICTURE, message, ORIGINATOR);

        compareEvent(expResult, result);
    }

    /**
     * Test of isStartMediaUploadEvent method, of class MediaEvent.
     */
    public void testIsStartMediaUploadEvent() {

        MediaEvent instance = 
            new MediaEvent(START_MEDIA_UPLOAD, USERNAME, DEVICEID, null, 
                           SOURCE_PICTURE, "Start media content upload.",
                           ORIGINATOR, false);
        assertTrue(instance.isStartMediaUploadEvent());
    }

    /**
     * Test of isEndMediaUploadEvent method, of class MediaEvent.
     */
    public void testIsEndMediaUploadEvent() {
        MediaEvent instance =
            new MediaEvent(END_MEDIA_UPLOAD, USERNAME, DEVICEID, null,
                           SOURCE_PICTURE, "End media content upload.",
                           ORIGINATOR, false);
        assertTrue(instance.isEndMediaUploadEvent());
    }

    // --------------------------------------------------------- Private methods
    private void compareEvent(Event ev1, Event ev2) {
        assertEquals(ev1.getEventType() , ev2.getEventType());
        assertEquals(ev1.getUserName()  , ev2.getUserName());
        assertEquals(ev1.getDeviceId()  , ev2.getDeviceId());
        assertEquals(ev1.getOriginator(), ev2.getOriginator());
        assertEquals(ev1.getSource()    , ev2.getSource());
        assertEquals(ev1.getMessage()   , ev2.getMessage());
        assertEquals(ev1.isError()      , ev2.isError());
    }
}
