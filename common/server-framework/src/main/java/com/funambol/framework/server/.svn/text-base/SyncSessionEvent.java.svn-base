/*
 * Funambol is a mobile platform developed by Funambol, Inc.
 * Copyright (C) 2009 Funambol, Inc.
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License version 3 as published by
 * the Free Software Foundation with the addition of the following permission
 * added to Section 15 as permitted in Section 7(a): FOR ANY PART OF THE COVERED
 * WORK IN WHICH THE COPYRIGHT IS OWNED BY FUNAMBOL, FUNAMBOL DISCLAIMS THE
 * WARRANTY OF NON INFRINGEMENT  OF THIRD PARTY RIGHTS.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, see http://www.gnu.org/licenses or write to
 * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301 USA.
 *
 * You can contact Funambol, Inc. headquarters at 643 Bair Island Road, Suite
 * 305, Redwood City, CA 94063, USA, or at email address info@funambol.com.
 *
 * The interactive user interfaces in modified source and object code versions
 * of this program must display Appropriate Legal Notices, as required under
 * Section 5 of the GNU Affero General Public License version 3.
 *
 * In accordance with Section 7(b) of the GNU Affero General Public License
 * version 3, these Appropriate Legal Notices must retain the display of the
 * "Powered by Funambol" logo. If the display of the logo is not reasonably
 * feasible for technical reasons, the Appropriate Legal Notices must display
 * the words "Powered by Funambol".
 */
package com.funambol.framework.server;

import java.io.Serializable;

/**
 * This class represents a logging event for start sync session and end sync
 * session events.
 *
 * @version $Id$
 */
public class SyncSessionEvent extends Event implements Serializable {

    // --------------------------------------------------------------- Constants
    private static final String ORIGINATOR         = "DS-SERVICE"        ;
    private static final String START_SYNC_SESSION = "START_SYNC_SESSION";
    private static final String END_SYNC_SESSION   = "END_SYNC_SESSION"  ;

    // ------------------------------------------------------------ Constructors
    /** Creates a new instance of SyncSessionEvent */
    public SyncSessionEvent() {
    }

    /**
     * Creates a new instance of SyncSessionEvent.
     *
     * @param eventType the event type
     * @param userName the user involved in the event
     * @param deviceId the device id involved in the event
     * @param sessionId the session id involved in the event
     * @param message the error message
     * @param duration the duration in milliseconds
     * @param statusCode is the status code bound to the event
     * @param error is true if an error occurred
     */
    public SyncSessionEvent(String  eventType ,
                            String  userName  ,
                            String  deviceId  ,
                            String  sessionId ,
                            String  message   ,
                            int     duration  ,
                            String  statusCode,
                            boolean error     ) {

        super(null, eventType, null, userName, deviceId, sessionId, null,
              message, null, 0, 0, 0, 0, duration, ORIGINATOR, statusCode, error);
    }

    /**
     * Creates a new instance of SyncSessionEvent.
     *
     * @param eventType the event type
     * @param userName the user involved in the event
     * @param deviceId the device id involved in the event
     * @param sessionId the session id involved in the event
     * @param message the error message
     * @param error is true if an error occurred
     */
    public SyncSessionEvent(String  eventType ,
                            String  userName  ,
                            String  deviceId  ,
                            String  sessionId ,
                            String  message   ,
                            boolean error     ) {

        this(eventType, userName, deviceId, sessionId, message, 0, null, error);
    }

    // ---------------------------------------------------------- Public methods

    /**
     * Creates an event of type START_SYNC_SESSION.
     *
     * @param userName the user involved in the event
     * @param deviceId the device id involved in the event
     * @param sessionId the session id involved in the event
     * @param message the error message
     * @return the event of type START_SYNC_SESSION
     */
    public static Event createStartSessionEvent(String userName ,
                                                String deviceId ,
                                                String sessionId,
                                                String message  ) {
        return new SyncSessionEvent(START_SYNC_SESSION, userName, deviceId,
                                    sessionId, message, 0, null, false);
    }

    /**
     * Creates an event of type START_SYNC_SESSION when an error occurred.
     *
     * @param userName the user involved in the event
     * @param deviceId the device id involved in the event
     * @param sessionId the session id involved in the event
     * @param message the error message
     * @param statusCode is the status code bound to the event
     * @return the event of type START_SYNC_SESSION when an error occurred
     */
    public static Event createStartSessionEventOnError(String userName  ,
                                                       String deviceId  ,
                                                       String sessionId ,
                                                       String message   ,
                                                       String statusCode) {
        return new SyncSessionEvent(START_SYNC_SESSION, userName, deviceId,
                                    sessionId, message, 0, statusCode, true);
    }

    /**
     * Creates an event of type END_SYNC_SESSION.
     *
     * @param userName the user involved in the event
     * @param deviceId the device id involved in the event
     * @param sessionId the session id involved in the event
     * @param message the error message
     * @param duration the duration in milliseconds
     * @return the event of type END_SYNC_SESSION
     */
    public static Event createEndSessionEvent(String userName ,
                                              String deviceId ,
                                              String sessionId,
                                              String message  ,
                                              int    duration) {
        return new SyncSessionEvent(END_SYNC_SESSION, userName, deviceId,
                                    sessionId, message, duration, null, false);
    }

    /**
     * Creates an event of type END_SYNC_SESSION.
     *
     * @param userName the user involved in the event
     * @param deviceId the device id involved in the event
     * @param sessionId the session id involved in the event
     * @param message the error message
     * @return the event of type END_SYNC_SESSION
     */
    public static Event createEndSessionEvent(String userName ,
                                              String deviceId ,
                                              String sessionId,
                                              String message) {
        return createEndSessionEvent(userName, deviceId, sessionId, message, 0);
    }

    /**
     * Creates an event of type END_SYNC_SESSION when an error occurred.
     *
     * @param userName the user involved in the event
     * @param deviceId the device id involved in the event
     * @param sessionId the session id involved in the event
     * @param message the error message
     * @param duration the duration in milliseconds
     * @return the event of type END_SYNC_SESSION when an error occurred
     */
    public static Event createEndSessionEventOnError(String userName ,
                                                     String deviceId ,
                                                     String sessionId,
                                                     String message  ,
                                                     int    duration) {
        return new SyncSessionEvent(END_SYNC_SESSION, userName, deviceId,
                                    sessionId, message, duration, null, true);
    }

    /**
     * Creates an event of type END_SYNC_SESSION when an error occurred.
     *
     * @param userName the user involved in the event
     * @param deviceId the device id involved in the event
     * @param sessionId the session id involved in the event
     * @param message the error message
     * @return the event of type END_SYNC_SESSION when an error occurred
     */
    public static Event createEndSessionEventOnError(String userName ,
                                                     String deviceId ,
                                                     String sessionId,
                                                     String message) {
        return createEndSessionEventOnError(userName, deviceId,
                                    sessionId, message, 0);
    }

    /**
     *
     * @return true if the event is triggered when the whole sync process ends,
     * false otherwise.
     */
    public boolean isEndSyncSessionEvent() {
        return END_SYNC_SESSION.equals(getEventType());
    }

    /**
     *
     * @return true if the event is triggered when the whole sync process starts,
     * false otherwise.
     */
    public boolean isStartSyncSessionEvent() {
        return START_SYNC_SESSION.equals(getEventType());
    }
}
