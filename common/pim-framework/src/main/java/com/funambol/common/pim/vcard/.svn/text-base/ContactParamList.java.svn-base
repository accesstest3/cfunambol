/*
 * Funambol is a mobile platform developed by Funambol, Inc.
 * Copyright (C) 2006 - 2007 Funambol, Inc.
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License version 3 as published by
 * the Free Software Foundation with the addition of the following permission
 * added to Section 15 as permitted in Section 7(a): FOR ANY PART OF THE COVERED
 * WORK IN WHICH THE COPYRIGHT IS OWNED BY FUNAMBOL, FUNAMBOL DISCLAIMS THE
 * WARRANTY OF NON INFRINGEMENT  OF THIRD PARTY RIGHTS.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, see http://www.gnu.org/licenses or write to
 * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301 USA.
 *
 * You can contact Funambol, Inc. headquarters at 643 Bair Island Road, Suite
 * 305, Redwood City, CA 94063, USA, or at email address info@funambol.com.
 *
 * The interactive user interfaces in modified source and object code versions
 * of this program must display Appropriate Legal Notices, as required under
 * Section 5 of the GNU Affero General Public License version 3.
 *
 * In accordance with Section 7(b) of the GNU Affero General Public License
 * version 3, these Appropriate Legal Notices must retain the display of the
 * "Powered by Funambol" logo. If the display of the logo is not reasonably
 * feasible for technical reasons, the Appropriate Legal Notices must display
 * the words "Powered by Funambol".
 */
package com.funambol.common.pim.vcard;

import java.util.ArrayList;

import com.funambol.common.pim.*;

/**
 * This objects represents a list of vCard property parameters.
 * The list is based on the informations contained in a list of parser tokens.
 * Note that this class depends on the class Token, which is generated by the 
 * JavaCC.
 * 
 * @version $Id: ContactParamList.java,v 1.2 2007-11-28 11:14:06 nichele Exp $
 */
public class ContactParamList extends ParamList {

    public ContactParamList () {
        super();
    }

    /**
     * Constructs a list of tokens starting from head and ending at tail, parses
     * the list and extracts informations about parameters
     *
     * @param head
     * @param tail
     */
    public ContactParamList (Token head, Token tail) {
        super();

        typelist = new ArrayList();

        for (Token tok = head; tok != tail; tok = tok.next) {
            if (!(tok.image.toUpperCase().indexOf("CHARSET=") == -1)) {
                chrset = tok.image.substring(9);
            }
            else if (!(tok.image.toUpperCase().indexOf("LANGUAGE=") == -1)) {
                language = tok.image.substring(10);
            }
            else if (!(tok.image.toUpperCase().indexOf("VALUE=") == -1)) {
                value = tok.image.substring(7);
            }
            else if (!(tok.image.toUpperCase().indexOf("ENCODING=") == -1)) {
                encoding = tok.image.substring(10);
            }
            else if (!(tok.image.toUpperCase().indexOf(";URL") == -1) |
                     !(tok.image.toUpperCase().indexOf(";INLINE") == -1) |
                     !(tok.image.toUpperCase().indexOf(";CONTENT-ID") == -1) |
                     !(tok.image.toUpperCase().indexOf(";CID") == -1)) {
                value = tok.image.substring(1);
            }
            else if (!(tok.image.toUpperCase().indexOf(";7BIT") == -1) |
                     !(tok.image.toUpperCase().indexOf(";8BIT") == -1) |
                     !(tok.image.toUpperCase().indexOf(";QUOTED-PRINTABLE") == -1) |
                     !(tok.image.toUpperCase().indexOf(";BASE64") == -1)) {
                encoding = tok.image.substring(1);
            }

            else if (!(tok.image.toUpperCase().indexOf("TYPE=") == -1)) {
                typelist.add(tok.image.substring(6));
            }
            // Specific for iCalendar
            else if (!(tok.image.toUpperCase().indexOf("ALTREP=") == -1)) {
                altrep = tok.image.substring(8);
            }
            else if (!(tok.image.toUpperCase().indexOf("CN=") == -1)) {
                cn = tok.image.substring(4);
            }
            else if (!(tok.image.toUpperCase().indexOf("CUTYPE=") == -1)) {
                cutype = tok.image.substring(8);
            }
            else if (!(tok.image.toUpperCase().indexOf("DELEGATED-FROM=") == -1)) {
                delegatedFrom = tok.image.substring(16);
            }
            else if (!(tok.image.toUpperCase().indexOf("DELEGATED-TO=") == -1)) {
                delegatedTo = tok.image.substring(14);
            }
            else if (!(tok.image.toUpperCase().indexOf("DIR=") == -1)) {
                dir = tok.image.substring(5);
            }
            else if (!(tok.image.toUpperCase().indexOf("MEMBER=") == -1)) {
                member = tok.image.substring(8);
            }
            else if (!(tok.image.toUpperCase().indexOf("PARTSTAT=") == -1)) {
                partstat = tok.image.substring(10);
            }
            else if (!(tok.image.toUpperCase().indexOf("RELATED=") == -1)) {
                related = tok.image.substring(9);
            }
            else if (!(tok.image.toUpperCase().indexOf("SENT-BY=") == -1)) {
                sentby = tok.image.substring(9);
            }
            else if (!(tok.image.toUpperCase().indexOf("X-") == -1)) {
                xProps.add(tok.image.substring(0, tok.image.indexOf('=')));
            }
            else {
                // if we're here AND there wasn't a parse error the token must be a TYPE
                typelist.add(tok.image.substring(1));
            }
        }
    }

}
